[{"/root/my-app/src/index.tsx":"1","/root/my-app/src/reportWebVitals.ts":"2","/root/my-app/src/App.tsx":"3","/root/my-app/src/recyclelist/RecycleList.tsx":"4","/root/my-app/src/ReactWindow.tsx":"5","/root/my-app/src/recyclelist/SampleMediaStream.tsx":"6","/root/my-app/src/recyclelist/RecycleListStore.ts":"7","/root/my-app/src/recyclelist/Sample1.tsx":"8","/root/my-app/src/recyclerlistview/web/index.js":"9","/root/my-app/src/recyclerlistview/dist/web/index.js":"10","/root/my-app/src/recyclerlistview/dist/web/core/ItemAnimator.js":"11","/root/my-app/src/recyclerlistview/dist/web/core/dependencies/ContextProvider.js":"12","/root/my-app/src/recyclerlistview/dist/web/core/dependencies/DataProvider.js":"13","/root/my-app/src/recyclerlistview/dist/web/core/dependencies/LayoutProvider.js":"14","/root/my-app/src/recyclerlistview/dist/web/core/dependencies/GridLayoutProvider.js":"15","/root/my-app/src/recyclerlistview/dist/web/core/RecyclerListView.js":"16","/root/my-app/src/recyclerlistview/dist/web/core/scrollcomponent/BaseScrollView.js":"17","/root/my-app/src/recyclerlistview/dist/web/core/ProgressiveListView.js":"18","/root/my-app/src/recyclerlistview/dist/web/utils/AutoScroll.js":"19","/root/my-app/src/recyclerlistview/dist/web/utils/ComponentCompat.js":"20","/root/my-app/src/recyclerlistview/dist/web/core/layoutmanager/GridLayoutManager.js":"21","/root/my-app/src/recyclerlistview/dist/web/core/layoutmanager/LayoutManager.js":"22","/root/my-app/src/recyclerlistview/dist/web/core/VirtualRenderer.js":"23","/root/my-app/src/recyclerlistview/dist/web/core/exceptions/CustomError.js":"24","/root/my-app/src/recyclerlistview/dist/web/core/constants/Constants.js":"25","/root/my-app/src/recyclerlistview/dist/web/core/exceptions/RecyclerListViewExceptions.js":"26","/root/my-app/src/recyclerlistview/dist/web/core/constants/Messages.js":"27","/root/my-app/src/recyclerlistview/dist/web/platform/web/viewrenderer/ViewRenderer.js":"28","/root/my-app/src/recyclerlistview/dist/web/platform/web/scrollcomponent/ScrollComponent.js":"29","/root/my-app/src/recyclerlistview/dist/web/utils/RecycleItemPool.js":"30","/root/my-app/src/recyclerlistview/dist/web/utils/TSCast.js":"31","/root/my-app/src/recyclerlistview/dist/web/core/ViewabilityTracker.js":"32","/root/my-app/src/recyclerlistview/dist/web/core/scrollcomponent/BaseScrollComponent.js":"33","/root/my-app/src/recyclerlistview/dist/web/platform/web/scrollcomponent/ScrollViewer.js":"34","/root/my-app/src/recyclerlistview/dist/web/core/viewrenderer/BaseViewRenderer.js":"35","/root/my-app/src/recyclerlistview/dist/web/utils/BinarySearch.js":"36","/root/my-app/src/recyclerlistview/dist/web/platform/web/scrollcomponent/ScrollEventNormalizer.js":"37"},{"size":500,"mtime":1611283050591,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":1611119168687,"results":"40","hashOfConfig":"39"},{"size":2475,"mtime":1626670233756,"results":"41","hashOfConfig":"39"},{"size":11466,"mtime":1626670216908,"results":"42","hashOfConfig":"39"},{"size":2559,"mtime":1611304685080,"results":"43","hashOfConfig":"39"},{"size":2962,"mtime":1626670056004,"results":"44","hashOfConfig":"39"},{"size":1736,"mtime":1611737443399,"results":"45","hashOfConfig":"39"},{"size":5939,"mtime":1612422719500,"results":"46","hashOfConfig":"39"},{"size":40,"mtime":1612423011138,"results":"47","hashOfConfig":"39"},{"size":1787,"mtime":1612425435670,"results":"48","hashOfConfig":"39"},{"size":950,"mtime":1612425435674,"results":"49","hashOfConfig":"39"},{"size":703,"mtime":1612425435674,"results":"50","hashOfConfig":"39"},{"size":3742,"mtime":1612425435682,"results":"51","hashOfConfig":"39"},{"size":3935,"mtime":1612425435682,"results":"52","hashOfConfig":"39"},{"size":2982,"mtime":1612425435682,"results":"53","hashOfConfig":"39"},{"size":36228,"mtime":1612425435674,"results":"54","hashOfConfig":"39"},{"size":1004,"mtime":1612425435686,"results":"55","hashOfConfig":"39"},{"size":3592,"mtime":1612425435674,"results":"56","hashOfConfig":"39"},{"size":1503,"mtime":1612425435714,"results":"57","hashOfConfig":"39"},{"size":2149,"mtime":1612425435690,"results":"58","hashOfConfig":"39"},{"size":3657,"mtime":1612425435682,"results":"59","hashOfConfig":"39"},{"size":7527,"mtime":1612425435682,"results":"60","hashOfConfig":"39"},{"size":15597,"mtime":1612425435670,"results":"61","hashOfConfig":"39"},{"size":1026,"mtime":1612425435682,"results":"62","hashOfConfig":"39"},{"size":242,"mtime":1612425435682,"results":"63","hashOfConfig":"39"},{"size":2233,"mtime":1612425435682,"results":"64","hashOfConfig":"39"},{"size":701,"mtime":1612425435686,"results":"65","hashOfConfig":"39"},{"size":4504,"mtime":1612425435714,"results":"66","hashOfConfig":"39"},{"size":3622,"mtime":1612425435714,"results":"67","hashOfConfig":"39"},{"size":2422,"mtime":1612425435686,"results":"68","hashOfConfig":"39"},{"size":302,"mtime":1612425435690,"results":"69","hashOfConfig":"39"},{"size":12706,"mtime":1612425435670,"results":"70","hashOfConfig":"39"},{"size":1053,"mtime":1612425435686,"results":"71","hashOfConfig":"39"},{"size":9033,"mtime":1612425435714,"results":"72","hashOfConfig":"39"},{"size":3120,"mtime":1612425435686,"results":"73","hashOfConfig":"39"},{"size":4679,"mtime":1612425435686,"results":"74","hashOfConfig":"39"},{"size":2185,"mtime":1612425435714,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"174qes2",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"98","usedDeprecatedRules":"95"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"101","usedDeprecatedRules":"95"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"104","usedDeprecatedRules":"95"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"107","usedDeprecatedRules":"95"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"110","usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"113","usedDeprecatedRules":"95"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"116","usedDeprecatedRules":"95"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"119","usedDeprecatedRules":"95"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"122","usedDeprecatedRules":"95"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"125","usedDeprecatedRules":"95"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"128","usedDeprecatedRules":"95"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"131","usedDeprecatedRules":"95"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"134","usedDeprecatedRules":"95"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"137","usedDeprecatedRules":"95"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"140","usedDeprecatedRules":"95"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"143","usedDeprecatedRules":"95"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"146","usedDeprecatedRules":"95"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"149","usedDeprecatedRules":"95"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"152","usedDeprecatedRules":"95"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"155","usedDeprecatedRules":"95"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"158","usedDeprecatedRules":"95"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"161","usedDeprecatedRules":"95"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"164","usedDeprecatedRules":"95"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"167","usedDeprecatedRules":"95"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"170","usedDeprecatedRules":"95"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"173","usedDeprecatedRules":"95"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"176","usedDeprecatedRules":"95"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"179","usedDeprecatedRules":"95"},"/root/my-app/src/index.tsx",[],["180","181"],"/root/my-app/src/reportWebVitals.ts",[],"/root/my-app/src/App.tsx",["182","183","184"],"/root/my-app/src/recyclelist/RecycleList.tsx",["185","186","187"],"/root/my-app/src/ReactWindow.tsx",["188"],"/root/my-app/src/recyclelist/SampleMediaStream.tsx",["189"],"/root/my-app/src/recyclelist/RecycleListStore.ts",[],"/root/my-app/src/recyclelist/Sample1.tsx",["190"],"/root/my-app/src/recyclerlistview/web/index.js",[],["191","192"],"/root/my-app/src/recyclerlistview/dist/web/index.js",["193"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ContextProvider_1 = require(\"./core/dependencies/ContextProvider\");\nexports.ContextProvider = ContextProvider_1.default;\nvar DataProvider_1 = require(\"./core/dependencies/DataProvider\");\nexports.DataProvider = DataProvider_1.default;\nexports.BaseDataProvider = DataProvider_1.BaseDataProvider;\nvar LayoutProvider_1 = require(\"./core/dependencies/LayoutProvider\");\nexports.BaseLayoutProvider = LayoutProvider_1.BaseLayoutProvider;\nexports.LayoutProvider = LayoutProvider_1.LayoutProvider;\nvar GridLayoutProvider_1 = require(\"./core/dependencies/GridLayoutProvider\");\nexports.GridLayoutProvider = GridLayoutProvider_1.GridLayoutProvider;\nvar RecyclerListView_1 = require(\"./core/RecyclerListView\");\nexports.RecyclerListView = RecyclerListView_1.default;\nvar BaseScrollView_1 = require(\"./core/scrollcomponent/BaseScrollView\");\nexports.BaseScrollView = BaseScrollView_1.default;\nvar ItemAnimator_1 = require(\"./core/ItemAnimator\");\nexports.BaseItemAnimator = ItemAnimator_1.BaseItemAnimator;\nvar AutoScroll_1 = require(\"./utils/AutoScroll\");\nexports.AutoScroll = AutoScroll_1.AutoScroll;\nvar LayoutManager_1 = require(\"./core/layoutmanager/LayoutManager\");\nexports.LayoutManager = LayoutManager_1.LayoutManager;\nexports.WrapGridLayoutManager = LayoutManager_1.WrapGridLayoutManager;\nvar GridLayoutManager_1 = require(\"./core/layoutmanager/GridLayoutManager\");\nexports.GridLayoutManager = GridLayoutManager_1.GridLayoutManager;\nvar ProgressiveListView_1 = require(\"./core/ProgressiveListView\");\nexports.ProgressiveListView = ProgressiveListView_1.default;\nvar ComponentCompat_1 = require(\"./utils/ComponentCompat\");\nexports.ComponentCompat = ComponentCompat_1.ComponentCompat;\n//# sourceMappingURL=index.js.map","/root/my-app/src/recyclerlistview/dist/web/core/ItemAnimator.js",["194"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseItemAnimator = /** @class */ (function () {\n    function BaseItemAnimator() {\n    }\n    BaseItemAnimator.prototype.animateWillMount = function (atX, atY, itemIndex) {\n        return undefined;\n    };\n    BaseItemAnimator.prototype.animateDidMount = function (atX, atY, itemRef, itemIndex) {\n        //no need\n    };\n    BaseItemAnimator.prototype.animateWillUpdate = function (fromX, fromY, toX, toY, itemRef, itemIndex) {\n        //no need\n    };\n    BaseItemAnimator.prototype.animateShift = function (fromX, fromY, toX, toY, itemRef, itemIndex) {\n        return false;\n    };\n    BaseItemAnimator.prototype.animateWillUnmount = function (atX, atY, itemRef, itemIndex) {\n        //no need\n    };\n    BaseItemAnimator.USE_NATIVE_DRIVER = true;\n    return BaseItemAnimator;\n}());\nexports.BaseItemAnimator = BaseItemAnimator;\n//# sourceMappingURL=ItemAnimator.js.map","/root/my-app/src/recyclerlistview/dist/web/core/dependencies/ContextProvider.js",["195"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/***\n * Context provider is useful in cases where your view gets destroyed and you want to maintain scroll position when recyclerlistview is recreated e.g,\n * back navigation in android when previous fragments onDestroyView has already been called. Since recyclerlistview only renders visible items you\n * can instantly jump to any location.\n *\n * Use this interface and implement the given methods to preserve context.\n */\nvar ContextProvider = /** @class */ (function () {\n    function ContextProvider() {\n    }\n    return ContextProvider;\n}());\nexports.default = ContextProvider;\n//# sourceMappingURL=ContextProvider.js.map","/root/my-app/src/recyclerlistview/dist/web/core/dependencies/DataProvider.js",["196","197","198"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ts_object_utils_1 = require(\"ts-object-utils\");\n/***\n * You can create a new instance or inherit and override default methods\n * Allows access to data and size. Clone with rows creates a new data provider and let listview know where to calculate row layout from.\n */\nvar BaseDataProvider = /** @class */ (function () {\n    function BaseDataProvider(rowHasChanged, getStableId) {\n        this._firstIndexToProcess = 0;\n        this._size = 0;\n        this._data = [];\n        this._hasStableIds = false;\n        this._requiresDataChangeHandling = false;\n        this.rowHasChanged = rowHasChanged;\n        if (getStableId) {\n            this.getStableId = getStableId;\n            this._hasStableIds = true;\n        }\n        else {\n            this.getStableId = function (index) { return index.toString(); };\n        }\n    }\n    BaseDataProvider.prototype.getDataForIndex = function (index) {\n        return this._data[index];\n    };\n    BaseDataProvider.prototype.getAllData = function () {\n        return this._data;\n    };\n    BaseDataProvider.prototype.getSize = function () {\n        return this._size;\n    };\n    BaseDataProvider.prototype.hasStableIds = function () {\n        return this._hasStableIds;\n    };\n    BaseDataProvider.prototype.requiresDataChangeHandling = function () {\n        return this._requiresDataChangeHandling;\n    };\n    BaseDataProvider.prototype.getFirstIndexToProcessInternal = function () {\n        return this._firstIndexToProcess;\n    };\n    //No need to override this one\n    //If you already know the first row where rowHasChanged will be false pass it upfront to avoid loop\n    BaseDataProvider.prototype.cloneWithRows = function (newData, firstModifiedIndex) {\n        var dp = this.newInstance(this.rowHasChanged, this.getStableId);\n        var newSize = newData.length;\n        var iterCount = Math.min(this._size, newSize);\n        if (ts_object_utils_1.ObjectUtil.isNullOrUndefined(firstModifiedIndex)) {\n            var i = 0;\n            for (i = 0; i < iterCount; i++) {\n                if (this.rowHasChanged(this._data[i], newData[i])) {\n                    break;\n                }\n            }\n            dp._firstIndexToProcess = i;\n        }\n        else {\n            dp._firstIndexToProcess = Math.max(Math.min(firstModifiedIndex, this._data.length), 0);\n        }\n        if (dp._firstIndexToProcess !== this._data.length) {\n            dp._requiresDataChangeHandling = true;\n        }\n        dp._data = newData;\n        dp._size = newSize;\n        return dp;\n    };\n    return BaseDataProvider;\n}());\nexports.BaseDataProvider = BaseDataProvider;\nvar DataProvider = /** @class */ (function (_super) {\n    __extends(DataProvider, _super);\n    function DataProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataProvider.prototype.newInstance = function (rowHasChanged, getStableId) {\n        return new DataProvider(rowHasChanged, getStableId);\n    };\n    return DataProvider;\n}(BaseDataProvider));\nexports.default = DataProvider;\n//# sourceMappingURL=DataProvider.js.map","/root/my-app/src/recyclerlistview/dist/web/core/dependencies/LayoutProvider.js",["199"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LayoutManager_1 = require(\"../layoutmanager/LayoutManager\");\n/**\n * Created by talha.naqvi on 05/04/17.\n * You can create a new instance or inherit and override default methods\n * You may need access to data provider here, it might make sense to pass a function which lets you fetch the latest data provider\n * Why only indexes? The answer is to allow data virtualization in the future. Since layouts are accessed much before the actual render assuming having all\n * data upfront will only limit possibilites in the future.\n *\n * By design LayoutProvider forces you to think in terms of view types. What that means is that you'll always be dealing with a finite set of view templates\n * with deterministic dimensions. We want to eliminate unnecessary re-layouts that happen when height, by mistake, is not taken into consideration.\n * This patters ensures that your scrolling is as smooth as it gets. You can always increase the number of types to handle non deterministic scenarios.\n *\n * NOTE: You can also implement features such as ListView/GridView switch by simple changing your layout provider.\n */\nvar BaseLayoutProvider = /** @class */ (function () {\n    function BaseLayoutProvider() {\n        //Unset if your new layout provider doesn't require firstVisibleIndex preservation on application\n        this.shouldRefreshWithAnchoring = true;\n    }\n    return BaseLayoutProvider;\n}());\nexports.BaseLayoutProvider = BaseLayoutProvider;\nvar LayoutProvider = /** @class */ (function (_super) {\n    __extends(LayoutProvider, _super);\n    function LayoutProvider(getLayoutTypeForIndex, setLayoutForType) {\n        var _this = _super.call(this) || this;\n        _this._getLayoutTypeForIndex = getLayoutTypeForIndex;\n        _this._setLayoutForType = setLayoutForType;\n        _this._tempDim = { height: 0, width: 0 };\n        return _this;\n    }\n    LayoutProvider.prototype.newLayoutManager = function (renderWindowSize, isHorizontal, cachedLayouts) {\n        this._lastLayoutManager = new LayoutManager_1.WrapGridLayoutManager(this, renderWindowSize, isHorizontal, cachedLayouts);\n        return this._lastLayoutManager;\n    };\n    //Provide a type for index, something which identifies the template of view about to load\n    LayoutProvider.prototype.getLayoutTypeForIndex = function (index) {\n        return this._getLayoutTypeForIndex(index);\n    };\n    //Given a type and dimension set the dimension values on given dimension object\n    //You can also get index here if you add an extra argument but we don't recommend using it.\n    LayoutProvider.prototype.setComputedLayout = function (type, dimension, index) {\n        return this._setLayoutForType(type, dimension, index);\n    };\n    LayoutProvider.prototype.checkDimensionDiscrepancy = function (dimension, type, index) {\n        var dimension1 = dimension;\n        this.setComputedLayout(type, this._tempDim, index);\n        var dimension2 = this._tempDim;\n        if (this._lastLayoutManager) {\n            this._lastLayoutManager.setMaxBounds(dimension2);\n        }\n        return dimension1.height !== dimension2.height || dimension1.width !== dimension2.width;\n    };\n    return LayoutProvider;\n}(BaseLayoutProvider));\nexports.LayoutProvider = LayoutProvider;\n//# sourceMappingURL=LayoutProvider.js.map","/root/my-app/src/recyclerlistview/dist/web/core/dependencies/GridLayoutProvider.js",["200"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LayoutProvider_1 = require(\"./LayoutProvider\");\nvar GridLayoutManager_1 = require(\"../layoutmanager/GridLayoutManager\");\nvar GridLayoutProvider = /** @class */ (function (_super) {\n    __extends(GridLayoutProvider, _super);\n    function GridLayoutProvider(maxSpan, getLayoutType, getSpan, \n    // If horizonal return width while spans will be rowspans. Opposite holds true if not horizontal\n    getHeightOrWidth, acceptableRelayoutDelta) {\n        var _this = _super.call(this, getLayoutType, function (type, dimension, index) {\n            _this.setLayout(dimension, index);\n        }) || this;\n        _this._getHeightOrWidth = getHeightOrWidth;\n        _this._getSpan = getSpan;\n        _this._maxSpan = maxSpan;\n        _this._acceptableRelayoutDelta = ((acceptableRelayoutDelta === undefined) || (acceptableRelayoutDelta === null)) ? 1 : acceptableRelayoutDelta;\n        return _this;\n    }\n    GridLayoutProvider.prototype.newLayoutManager = function (renderWindowSize, isHorizontal, cachedLayouts) {\n        this._isHorizontal = isHorizontal;\n        this._renderWindowSize = renderWindowSize;\n        return new GridLayoutManager_1.GridLayoutManager(this, renderWindowSize, this._getSpan, this._maxSpan, this._acceptableRelayoutDelta, this._isHorizontal, cachedLayouts);\n    };\n    GridLayoutProvider.prototype.setLayout = function (dimension, index) {\n        var maxSpan = this._maxSpan;\n        var itemSpan = this._getSpan(index);\n        if (itemSpan > maxSpan) {\n            throw new Error(\"Item span for index \" + index + \" is more than the max span\");\n        }\n        if (this._renderWindowSize) {\n            if (this._isHorizontal) {\n                dimension.width = this._getHeightOrWidth(index);\n                dimension.height = (this._renderWindowSize.height / maxSpan) * itemSpan;\n            }\n            else {\n                dimension.height = this._getHeightOrWidth(index);\n                dimension.width = (this._renderWindowSize.width / maxSpan) * itemSpan;\n            }\n        }\n        else {\n            throw new Error(\"setLayout called before layoutmanager was created, cannot be handled\");\n        }\n    };\n    return GridLayoutProvider;\n}(LayoutProvider_1.LayoutProvider));\nexports.GridLayoutProvider = GridLayoutProvider;\n//# sourceMappingURL=GridLayoutProvider.js.map","/root/my-app/src/recyclerlistview/dist/web/core/RecyclerListView.js",["201","202","203"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/***\n * DONE: Reduce layout processing on data insert\n * DONE: Add notify data set changed and notify data insert option in data source\n * DONE: Add on end reached callback\n * DONE: Make another class for render stack generator\n * DONE: Simplify rendering a loading footer\n * DONE: Anchor first visible index on any insert/delete data wise\n * DONE: Build Scroll to index\n * DONE: Give viewability callbacks\n * DONE: Add full render logic in cases like change of dimensions\n * DONE: Fix all proptypes\n * DONE: Add Initial render Index support\n * DONE: Add animated scroll to web scrollviewer\n * DONE: Animate list view transition, including add/remove\n * DONE: Implement sticky headers and footers\n * TODO: Destroy less frequently used items in recycle pool, this will help in case of too many types.\n * TODO: Make viewability callbacks configurable\n * TODO: Observe size changes on web to optimize for reflowability\n * TODO: Solve //TSI\n */\nvar debounce = require(\"lodash.debounce\");\nvar PropTypes = require(\"prop-types\");\nvar React = require(\"react\");\nvar ts_object_utils_1 = require(\"ts-object-utils\");\nvar ContextProvider_1 = require(\"./dependencies/ContextProvider\");\nvar DataProvider_1 = require(\"./dependencies/DataProvider\");\nvar LayoutProvider_1 = require(\"./dependencies/LayoutProvider\");\nvar CustomError_1 = require(\"./exceptions/CustomError\");\nvar RecyclerListViewExceptions_1 = require(\"./exceptions/RecyclerListViewExceptions\");\nvar Constants_1 = require(\"./constants/Constants\");\nvar Messages_1 = require(\"./constants/Messages\");\nvar VirtualRenderer_1 = require(\"./VirtualRenderer\");\nvar ItemAnimator_1 = require(\"./ItemAnimator\");\nvar ComponentCompat_1 = require(\"../utils/ComponentCompat\");\n//#if [REACT-NATIVE]\n//import ScrollComponent from \"../platform/reactnative/scrollcomponent/ScrollComponent\";\n//import ViewRenderer from \"../platform/reactnative/viewrenderer/ViewRenderer\";\n//import { DefaultJSItemAnimator as DefaultItemAnimator } from \"../platform/reactnative/itemanimators/defaultjsanimator/DefaultJSItemAnimator\";\n//import { Platform } from \"react-native\";\n//const IS_WEB = !Platform || Platform.OS === \"web\";\n//#endif\n/***\n * To use on web, start importing from recyclerlistview/web. To make it even easier specify an alias in you builder of choice.\n */\n//#if [WEB]\nvar ScrollComponent_1 = require(\"../platform/web/scrollcomponent/ScrollComponent\");\nvar ViewRenderer_1 = require(\"../platform/web/viewrenderer/ViewRenderer\");\nvar IS_WEB = true;\nvar RecyclerListView = /** @class */ (function (_super) {\n    __extends(RecyclerListView, _super);\n    function RecyclerListView(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.refreshRequestDebouncer = debounce(function (executable) {\n            executable();\n        });\n        _this._onEndReachedCalled = false;\n        _this._initComplete = false;\n        _this._relayoutReqIndex = -1;\n        _this._params = {\n            initialOffset: 0,\n            initialRenderIndex: 0,\n            isHorizontal: false,\n            itemCount: 0,\n            renderAheadOffset: 250,\n        };\n        _this._layout = { height: 0, width: 0 };\n        _this._pendingScrollToOffset = null;\n        _this._tempDim = { height: 0, width: 0 };\n        _this._initialOffset = 0;\n        _this._scrollComponent = null;\n        //If the native content container is used, then positions of the list items are changed on the native side. The animated library used\n        //by the default item animator also changes the same positions which could lead to inconsistency. Hence, the base item animator which\n        //does not perform any such animations will be used.\n        _this._defaultItemAnimator = new ItemAnimator_1.BaseItemAnimator();\n        _this.scrollToOffset = function (x, y, animate) {\n            if (animate === void 0) { animate = false; }\n            if (_this._scrollComponent) {\n                if (_this.props.isHorizontal) {\n                    y = 0;\n                }\n                else {\n                    x = 0;\n                }\n                _this._scrollComponent.scrollTo(x, y, animate);\n            }\n        };\n        _this._onSizeChanged = function (layout) {\n            if (!_this.props.canChangeSize && _this.props.layoutSize) {\n                return;\n            }\n            var hasHeightChanged = _this._layout.height !== layout.height;\n            var hasWidthChanged = _this._layout.width !== layout.width;\n            _this._layout.height = layout.height;\n            _this._layout.width = layout.width;\n            if (layout.height === 0 || layout.width === 0) {\n                throw new CustomError_1.default(RecyclerListViewExceptions_1.default.layoutException);\n            }\n            if (!_this._initComplete) {\n                _this._initComplete = true;\n                _this._initTrackers(_this.props);\n                _this._processOnEndReached();\n            }\n            else {\n                if ((hasHeightChanged && hasWidthChanged) ||\n                    (hasHeightChanged && _this.props.isHorizontal) ||\n                    (hasWidthChanged && !_this.props.isHorizontal)) {\n                    _this._checkAndChangeLayouts(_this.props, true);\n                }\n                else {\n                    _this._refreshViewability();\n                }\n            }\n        };\n        _this._renderStackWhenReady = function (stack) {\n            if (!_this._initStateIfRequired(stack)) {\n                _this.setState(function () {\n                    return { renderStack: stack };\n                });\n            }\n        };\n        _this._dataHasChanged = function (row1, row2) {\n            return _this.props.dataProvider.rowHasChanged(row1, row2);\n        };\n        _this._onViewContainerSizeChange = function (dim, index) {\n            //Cannot be null here\n            var layoutManager = _this._virtualRenderer.getLayoutManager();\n            if (_this.props.debugHandlers && _this.props.debugHandlers.resizeDebugHandler) {\n                var itemRect = layoutManager.getLayouts()[index];\n                _this.props.debugHandlers.resizeDebugHandler.resizeDebug({\n                    width: itemRect.width,\n                    height: itemRect.height,\n                }, dim, index);\n            }\n            if (layoutManager.overrideLayout(index, dim)) {\n                if (_this._relayoutReqIndex === -1) {\n                    _this._relayoutReqIndex = index;\n                }\n                else {\n                    _this._relayoutReqIndex = Math.min(_this._relayoutReqIndex, index);\n                }\n                _this._queueStateRefresh();\n            }\n        };\n        _this._onScroll = function (offsetX, offsetY, rawEvent) {\n            // correction to be positive to shift offset upwards; negative to push offset downwards.\n            // extracting the correction value from logical offset and updating offset of virtual renderer.\n            _this._virtualRenderer.updateOffset(offsetX, offsetY, true, _this._getWindowCorrection(offsetX, offsetY, _this.props));\n            if (_this.props.onScroll) {\n                _this.props.onScroll(rawEvent, offsetX, offsetY);\n            }\n            _this._processOnEndReached();\n        };\n        _this._virtualRenderer = new VirtualRenderer_1.default(_this._renderStackWhenReady, function (offset) {\n            _this._pendingScrollToOffset = offset;\n        }, function (index) {\n            return _this.props.dataProvider.getStableId(index);\n        }, !props.disableRecycling);\n        _this._windowCorrection = {\n            startCorrection: 0, endCorrection: 0, windowShift: 0,\n        };\n        _this._getContextFromContextProvider(props);\n        if (props.layoutSize) {\n            _this._layout.height = props.layoutSize.height;\n            _this._layout.width = props.layoutSize.width;\n            _this._initComplete = true;\n            _this._initTrackers(props);\n        }\n        else {\n            _this.state = {\n                internalSnapshot: {},\n                renderStack: {},\n            };\n        }\n        return _this;\n    }\n    RecyclerListView.prototype.componentWillReceivePropsCompat = function (newProps) {\n        this._assertDependencyPresence(newProps);\n        this._checkAndChangeLayouts(newProps);\n        if (!newProps.onVisibleIndicesChanged) {\n            this._virtualRenderer.removeVisibleItemsListener();\n        }\n        if (newProps.onVisibleIndexesChanged) {\n            throw new CustomError_1.default(RecyclerListViewExceptions_1.default.usingOldVisibleIndexesChangedParam);\n        }\n        if (newProps.onVisibleIndicesChanged) {\n            this._virtualRenderer.attachVisibleItemsListener(newProps.onVisibleIndicesChanged);\n        }\n    };\n    RecyclerListView.prototype.componentDidUpdate = function () {\n        this._processInitialOffset();\n        this._processOnEndReached();\n        this._checkAndChangeLayouts(this.props);\n        if (this.props.dataProvider.getSize() === 0) {\n            console.warn(Messages_1.Messages.WARN_NO_DATA); //tslint:disable-line\n        }\n    };\n    RecyclerListView.prototype.componentDidMount = function () {\n        if (this._initComplete) {\n            this._processInitialOffset();\n            this._processOnEndReached();\n        }\n    };\n    RecyclerListView.prototype.componentWillUnmount = function () {\n        if (this.props.contextProvider) {\n            var uniqueKey = this.props.contextProvider.getUniqueKey();\n            if (uniqueKey) {\n                this.props.contextProvider.save(uniqueKey + Constants_1.Constants.CONTEXT_PROVIDER_OFFSET_KEY_SUFFIX, this.getCurrentScrollOffset());\n                if (this.props.forceNonDeterministicRendering) {\n                    if (this._virtualRenderer) {\n                        var layoutManager = this._virtualRenderer.getLayoutManager();\n                        if (layoutManager) {\n                            var layoutsToCache = layoutManager.getLayouts();\n                            this.props.contextProvider.save(uniqueKey + Constants_1.Constants.CONTEXT_PROVIDER_LAYOUT_KEY_SUFFIX, JSON.stringify({ layoutArray: layoutsToCache }));\n                        }\n                    }\n                }\n            }\n        }\n    };\n    RecyclerListView.prototype.scrollToIndex = function (index, animate) {\n        var layoutManager = this._virtualRenderer.getLayoutManager();\n        if (layoutManager) {\n            var offsets = layoutManager.getOffsetForIndex(index);\n            this.scrollToOffset(offsets.x, offsets.y, animate);\n        }\n        else {\n            console.warn(Messages_1.Messages.WARN_SCROLL_TO_INDEX); //tslint:disable-line\n        }\n    };\n    /**\n     * This API is almost similar to scrollToIndex, but differs when the view is already in viewport.\n     * Instead of bringing the view to the top of the viewport, it will calculate the overflow of the @param index\n     * and scroll to just bring the entire view to viewport.\n     */\n    RecyclerListView.prototype.bringToFocus = function (index, animate) {\n        var listSize = this.getRenderedSize();\n        var itemLayout = this.getLayout(index);\n        var currentScrollOffset = this.getCurrentScrollOffset();\n        var isHorizontal = this.props.isHorizontal;\n        if (itemLayout) {\n            var mainAxisLayoutDimen = isHorizontal ? itemLayout.width : itemLayout.height;\n            var mainAxisLayoutPos = isHorizontal ? itemLayout.x : itemLayout.y;\n            var mainAxisListDimen = isHorizontal ? listSize.width : listSize.height;\n            var screenEndPos = mainAxisListDimen + currentScrollOffset;\n            if (mainAxisLayoutDimen > mainAxisListDimen || mainAxisLayoutPos < currentScrollOffset || mainAxisLayoutPos > screenEndPos) {\n                this.scrollToIndex(index);\n            }\n            else {\n                var viewEndPos = mainAxisLayoutPos + mainAxisLayoutDimen;\n                if (viewEndPos > screenEndPos) {\n                    var offset = viewEndPos - screenEndPos;\n                    this.scrollToOffset(0, offset + currentScrollOffset, animate);\n                }\n            }\n        }\n    };\n    RecyclerListView.prototype.scrollToItem = function (data, animate) {\n        var count = this.props.dataProvider.getSize();\n        for (var i = 0; i < count; i++) {\n            if (this.props.dataProvider.getDataForIndex(i) === data) {\n                this.scrollToIndex(i, animate);\n                break;\n            }\n        }\n    };\n    RecyclerListView.prototype.getLayout = function (index) {\n        var layoutManager = this._virtualRenderer.getLayoutManager();\n        return layoutManager ? layoutManager.getLayouts()[index] : undefined;\n    };\n    RecyclerListView.prototype.scrollToTop = function (animate) {\n        this.scrollToOffset(0, 0, animate);\n    };\n    RecyclerListView.prototype.scrollToEnd = function (animate) {\n        var lastIndex = this.props.dataProvider.getSize() - 1;\n        this.scrollToIndex(lastIndex, animate);\n    };\n    // You can use requestAnimationFrame callback to change renderAhead in multiple frames to enable advanced progressive\n    // rendering when view types are very complex. This method returns a boolean saying if the update was committed. Retry in\n    // the next frame if you get a failure (if mount wasn't complete). Value should be greater than or equal to 0;\n    // Very useful when you have a page where you need a large renderAheadOffset. Setting it at once will slow down the load and\n    // this will help mitigate that.\n    RecyclerListView.prototype.updateRenderAheadOffset = function (renderAheadOffset) {\n        var viewabilityTracker = this._virtualRenderer.getViewabilityTracker();\n        if (viewabilityTracker) {\n            viewabilityTracker.updateRenderAheadOffset(renderAheadOffset);\n            return true;\n        }\n        return false;\n    };\n    RecyclerListView.prototype.getCurrentRenderAheadOffset = function () {\n        var viewabilityTracker = this._virtualRenderer.getViewabilityTracker();\n        if (viewabilityTracker) {\n            return viewabilityTracker.getCurrentRenderAheadOffset();\n        }\n        return this.props.renderAheadOffset;\n    };\n    RecyclerListView.prototype.getCurrentScrollOffset = function () {\n        var viewabilityTracker = this._virtualRenderer.getViewabilityTracker();\n        return viewabilityTracker ? viewabilityTracker.getLastActualOffset() : 0;\n    };\n    RecyclerListView.prototype.findApproxFirstVisibleIndex = function () {\n        var viewabilityTracker = this._virtualRenderer.getViewabilityTracker();\n        return viewabilityTracker ? viewabilityTracker.findFirstLogicallyVisibleIndex() : 0;\n    };\n    RecyclerListView.prototype.getRenderedSize = function () {\n        return this._layout;\n    };\n    RecyclerListView.prototype.getContentDimension = function () {\n        return this._virtualRenderer.getLayoutDimension();\n    };\n    // Force Rerender forcefully to update view renderer. Use this in rare circumstances\n    RecyclerListView.prototype.forceRerender = function () {\n        this.setState({\n            internalSnapshot: {},\n        });\n    };\n    RecyclerListView.prototype.renderCompat = function () {\n        //TODO:Talha\n        // const {\n        //     layoutProvider,\n        //     dataProvider,\n        //     contextProvider,\n        //     renderAheadOffset,\n        //     onEndReached,\n        //     onEndReachedThreshold,\n        //     onVisibleIndicesChanged,\n        //     initialOffset,\n        //     initialRenderIndex,\n        //     disableRecycling,\n        //     forceNonDeterministicRendering,\n        //     extendedState,\n        //     itemAnimator,\n        //     rowRenderer,\n        //     ...props,\n        // } = this.props;\n        var _this = this;\n        return (React.createElement(ScrollComponent_1.default, __assign({ ref: function (scrollComponent) { return _this._scrollComponent = scrollComponent; } }, this.props, this.props.scrollViewProps, { onScroll: this._onScroll, onSizeChanged: this._onSizeChanged, contentHeight: this._initComplete ? this._virtualRenderer.getLayoutDimension().height : 0, contentWidth: this._initComplete ? this._virtualRenderer.getLayoutDimension().width : 0, renderAheadOffset: this.getCurrentRenderAheadOffset() }), this._generateRenderStack()));\n    };\n    RecyclerListView.prototype.getVirtualRenderer = function () {\n        return this._virtualRenderer;\n    };\n    RecyclerListView.prototype._processInitialOffset = function () {\n        var _this = this;\n        if (this._pendingScrollToOffset) {\n            var offset_1 = this._pendingScrollToOffset;\n            this._pendingScrollToOffset = null;\n            if (this.props.isHorizontal) {\n                offset_1.y = 0;\n            }\n            else {\n                offset_1.x = 0;\n            }\n            setTimeout(function () {\n                _this.scrollToOffset(offset_1.x, offset_1.y, false);\n            }, 0);\n        }\n    };\n    RecyclerListView.prototype._getContextFromContextProvider = function (props) {\n        if (props.contextProvider) {\n            var uniqueKey = props.contextProvider.getUniqueKey();\n            if (uniqueKey) {\n                var offset = props.contextProvider.get(uniqueKey + Constants_1.Constants.CONTEXT_PROVIDER_OFFSET_KEY_SUFFIX);\n                if (typeof offset === \"number\" && offset > 0) {\n                    this._initialOffset = offset;\n                    if (props.onRecreate) {\n                        props.onRecreate({ lastOffset: this._initialOffset });\n                    }\n                    props.contextProvider.remove(uniqueKey + Constants_1.Constants.CONTEXT_PROVIDER_OFFSET_KEY_SUFFIX);\n                }\n                if (props.forceNonDeterministicRendering) {\n                    var cachedLayouts = props.contextProvider.get(uniqueKey + Constants_1.Constants.CONTEXT_PROVIDER_LAYOUT_KEY_SUFFIX);\n                    if (cachedLayouts && typeof cachedLayouts === \"string\") {\n                        this._cachedLayouts = JSON.parse(cachedLayouts).layoutArray;\n                        props.contextProvider.remove(uniqueKey + Constants_1.Constants.CONTEXT_PROVIDER_LAYOUT_KEY_SUFFIX);\n                    }\n                }\n            }\n        }\n    };\n    RecyclerListView.prototype._checkAndChangeLayouts = function (newProps, forceFullRender) {\n        this._params.isHorizontal = newProps.isHorizontal;\n        this._params.itemCount = newProps.dataProvider.getSize();\n        this._virtualRenderer.setParamsAndDimensions(this._params, this._layout);\n        this._virtualRenderer.setLayoutProvider(newProps.layoutProvider);\n        if (newProps.dataProvider.hasStableIds() && this.props.dataProvider !== newProps.dataProvider && newProps.dataProvider.requiresDataChangeHandling()) {\n            this._virtualRenderer.handleDataSetChange(newProps.dataProvider, this.props.optimizeForInsertDeleteAnimations);\n        }\n        if (this.props.layoutProvider !== newProps.layoutProvider || this.props.isHorizontal !== newProps.isHorizontal) {\n            //TODO:Talha use old layout manager\n            this._virtualRenderer.setLayoutManager(newProps.layoutProvider.newLayoutManager(this._layout, newProps.isHorizontal));\n            if (newProps.layoutProvider.shouldRefreshWithAnchoring) {\n                this._virtualRenderer.refreshWithAnchor();\n            }\n            else {\n                this._virtualRenderer.refresh();\n            }\n            this._refreshViewability();\n        }\n        else if (this.props.dataProvider !== newProps.dataProvider) {\n            if (newProps.dataProvider.getSize() > this.props.dataProvider.getSize()) {\n                this._onEndReachedCalled = false;\n            }\n            var layoutManager = this._virtualRenderer.getLayoutManager();\n            if (layoutManager) {\n                layoutManager.relayoutFromIndex(newProps.dataProvider.getFirstIndexToProcessInternal(), newProps.dataProvider.getSize());\n                this._virtualRenderer.refresh();\n            }\n        }\n        else if (forceFullRender) {\n            var layoutManager = this._virtualRenderer.getLayoutManager();\n            if (layoutManager) {\n                var cachedLayouts = layoutManager.getLayouts();\n                this._virtualRenderer.setLayoutManager(newProps.layoutProvider.newLayoutManager(this._layout, newProps.isHorizontal, cachedLayouts));\n                this._refreshViewability();\n            }\n        }\n        else if (this._relayoutReqIndex >= 0) {\n            var layoutManager = this._virtualRenderer.getLayoutManager();\n            if (layoutManager) {\n                var dataProviderSize = newProps.dataProvider.getSize();\n                layoutManager.relayoutFromIndex(Math.min(Math.max(dataProviderSize - 1, 0), this._relayoutReqIndex), dataProviderSize);\n                this._relayoutReqIndex = -1;\n                this._refreshViewability();\n            }\n        }\n    };\n    RecyclerListView.prototype._refreshViewability = function () {\n        this._virtualRenderer.refresh();\n        this._queueStateRefresh();\n    };\n    RecyclerListView.prototype._queueStateRefresh = function () {\n        var _this = this;\n        this.refreshRequestDebouncer(function () {\n            _this.setState(function (prevState) {\n                return prevState;\n            });\n        });\n    };\n    RecyclerListView.prototype._initStateIfRequired = function (stack) {\n        if (!this.state) {\n            this.state = {\n                internalSnapshot: {},\n                renderStack: stack,\n            };\n            return true;\n        }\n        return false;\n    };\n    RecyclerListView.prototype._initTrackers = function (props) {\n        this._assertDependencyPresence(props);\n        if (props.onVisibleIndexesChanged) {\n            throw new CustomError_1.default(RecyclerListViewExceptions_1.default.usingOldVisibleIndexesChangedParam);\n        }\n        if (props.onVisibleIndicesChanged) {\n            this._virtualRenderer.attachVisibleItemsListener(props.onVisibleIndicesChanged);\n        }\n        this._params = {\n            initialOffset: this._initialOffset ? this._initialOffset : props.initialOffset,\n            initialRenderIndex: props.initialRenderIndex,\n            isHorizontal: props.isHorizontal,\n            itemCount: props.dataProvider.getSize(),\n            renderAheadOffset: props.renderAheadOffset,\n        };\n        this._virtualRenderer.setParamsAndDimensions(this._params, this._layout);\n        var layoutManager = props.layoutProvider.newLayoutManager(this._layout, props.isHorizontal, this._cachedLayouts);\n        this._virtualRenderer.setLayoutManager(layoutManager);\n        this._virtualRenderer.setLayoutProvider(props.layoutProvider);\n        this._virtualRenderer.init();\n        var offset = this._virtualRenderer.getInitialOffset();\n        var contentDimension = layoutManager.getContentDimension();\n        if ((offset.y > 0 && contentDimension.height > this._layout.height) ||\n            (offset.x > 0 && contentDimension.width > this._layout.width)) {\n            this._pendingScrollToOffset = offset;\n            if (!this._initStateIfRequired()) {\n                this.setState({});\n            }\n        }\n        else {\n            this._virtualRenderer.startViewabilityTracker(this._getWindowCorrection(offset.x, offset.y, props));\n        }\n    };\n    RecyclerListView.prototype._getWindowCorrection = function (offsetX, offsetY, props) {\n        return (props.applyWindowCorrection && props.applyWindowCorrection(offsetX, offsetY, this._windowCorrection)) || this._windowCorrection;\n    };\n    RecyclerListView.prototype._assertDependencyPresence = function (props) {\n        if (!props.dataProvider || !props.layoutProvider) {\n            throw new CustomError_1.default(RecyclerListViewExceptions_1.default.unresolvedDependenciesException);\n        }\n    };\n    RecyclerListView.prototype._assertType = function (type) {\n        if (!type && type !== 0) {\n            throw new CustomError_1.default(RecyclerListViewExceptions_1.default.itemTypeNullException);\n        }\n    };\n    RecyclerListView.prototype._renderRowUsingMeta = function (itemMeta) {\n        var dataSize = this.props.dataProvider.getSize();\n        var dataIndex = itemMeta.dataIndex;\n        if (!ts_object_utils_1.ObjectUtil.isNullOrUndefined(dataIndex) && dataIndex < dataSize) {\n            var itemRect = this._virtualRenderer.getLayoutManager().getLayouts()[dataIndex];\n            var data = this.props.dataProvider.getDataForIndex(dataIndex);\n            var type = this.props.layoutProvider.getLayoutTypeForIndex(dataIndex);\n            var key = this._virtualRenderer.syncAndGetKey(dataIndex);\n            var styleOverrides = this._virtualRenderer.getLayoutManager().getStyleOverridesForIndex(dataIndex);\n            this._assertType(type);\n            if (!this.props.forceNonDeterministicRendering) {\n                this._checkExpectedDimensionDiscrepancy(itemRect, type, dataIndex);\n            }\n            return (React.createElement(ViewRenderer_1.default, { key: key, data: data, dataHasChanged: this._dataHasChanged, x: itemRect.x, y: itemRect.y, layoutType: type, index: dataIndex, styleOverrides: styleOverrides, layoutProvider: this.props.layoutProvider, forceNonDeterministicRendering: this.props.forceNonDeterministicRendering, isHorizontal: this.props.isHorizontal, onSizeChanged: this._onViewContainerSizeChange, childRenderer: this.props.rowRenderer, height: itemRect.height, width: itemRect.width, itemAnimator: ts_object_utils_1.Default.value(this.props.itemAnimator, this._defaultItemAnimator), extendedState: this.props.extendedState, internalSnapshot: this.state.internalSnapshot, onItemLayout: this.props.onItemLayout }));\n        }\n        return null;\n    };\n    RecyclerListView.prototype._checkExpectedDimensionDiscrepancy = function (itemRect, type, index) {\n        if (this.props.layoutProvider.checkDimensionDiscrepancy(itemRect, type, index)) {\n            if (this._relayoutReqIndex === -1) {\n                this._relayoutReqIndex = index;\n            }\n            else {\n                this._relayoutReqIndex = Math.min(this._relayoutReqIndex, index);\n            }\n        }\n    };\n    RecyclerListView.prototype._generateRenderStack = function () {\n        var renderedItems = [];\n        for (var key in this.state.renderStack) {\n            if (this.state.renderStack.hasOwnProperty(key)) {\n                renderedItems.push(this._renderRowUsingMeta(this.state.renderStack[key]));\n            }\n        }\n        return renderedItems;\n    };\n    RecyclerListView.prototype._processOnEndReached = function () {\n        if (this.props.onEndReached && this._virtualRenderer) {\n            var layout = this._virtualRenderer.getLayoutDimension();\n            var viewabilityTracker = this._virtualRenderer.getViewabilityTracker();\n            if (viewabilityTracker) {\n                var windowBound = this.props.isHorizontal ? layout.width - this._layout.width : layout.height - this._layout.height;\n                var lastOffset = viewabilityTracker ? viewabilityTracker.getLastOffset() : 0;\n                if (windowBound - lastOffset <= ts_object_utils_1.Default.value(this.props.onEndReachedThreshold, 0)) {\n                    if (this.props.onEndReached && !this._onEndReachedCalled) {\n                        this._onEndReachedCalled = true;\n                        this.props.onEndReached();\n                    }\n                }\n                else {\n                    this._onEndReachedCalled = false;\n                }\n            }\n        }\n    };\n    RecyclerListView.defaultProps = {\n        canChangeSize: false,\n        disableRecycling: false,\n        initialOffset: 0,\n        initialRenderIndex: 0,\n        isHorizontal: false,\n        onEndReachedThreshold: 0,\n        renderAheadOffset: IS_WEB ? 1000 : 250,\n    };\n    RecyclerListView.propTypes = {};\n    return RecyclerListView;\n}(ComponentCompat_1.ComponentCompat));\nexports.default = RecyclerListView;\nRecyclerListView.propTypes = {\n    //Refer the sample\n    layoutProvider: PropTypes.instanceOf(LayoutProvider_1.BaseLayoutProvider).isRequired,\n    //Refer the sample\n    dataProvider: PropTypes.instanceOf(DataProvider_1.BaseDataProvider).isRequired,\n    //Used to maintain scroll position in case view gets destroyed e.g, cases of back navigation\n    contextProvider: PropTypes.instanceOf(ContextProvider_1.default),\n    //Methods which returns react component to be rendered. You get type of view and data in the callback.\n    rowRenderer: PropTypes.func.isRequired,\n    //Initial offset you want to start rendering from, very useful if you want to maintain scroll context across pages.\n    initialOffset: PropTypes.number,\n    //Specify how many pixels in advance do you want views to be rendered. Increasing this value can help reduce blanks (if any). However keeping this as low\n    //as possible should be the intent. Higher values also increase re-render compute\n    renderAheadOffset: PropTypes.number,\n    //Whether the listview is horizontally scrollable. Both use staggeredGrid implementation\n    isHorizontal: PropTypes.bool,\n    //On scroll callback onScroll(rawEvent, offsetX, offsetY), note you get offsets no need to read scrollTop/scrollLeft\n    onScroll: PropTypes.func,\n    //callback onRecreate(params), when recreating recycler view from context provider. Gives you the initial params in the first\n    //frame itself to allow you to render content accordingly\n    onRecreate: PropTypes.func,\n    //Provide your own ScrollView Component. The contract for the scroll event should match the native scroll event contract, i.e.\n    // scrollEvent = { nativeEvent: { contentOffset: { x: offset, y: offset } } }\n    //Note: Please extend BaseScrollView to achieve expected behaviour\n    externalScrollView: PropTypes.func,\n    //Callback given when user scrolls to the end of the list or footer just becomes visible, useful in incremental loading scenarios\n    onEndReached: PropTypes.func,\n    //Specify how many pixels in advance you onEndReached callback\n    onEndReachedThreshold: PropTypes.number,\n    //Deprecated. Please use onVisibleIndicesChanged instead.\n    onVisibleIndexesChanged: PropTypes.func,\n    //Provides visible index, helpful in sending impression events etc, onVisibleIndicesChanged(all, now, notNow)\n    onVisibleIndicesChanged: PropTypes.func,\n    //Provide this method if you want to render a footer. Helpful in showing a loader while doing incremental loads.\n    renderFooter: PropTypes.func,\n    //Specify the initial item index you want rendering to start from. Preferred over initialOffset if both are specified.\n    initialRenderIndex: PropTypes.number,\n    //Specify the estimated size of the recyclerlistview to render the list items in the first pass. If provided, recyclerlistview will\n    //use these dimensions to fill in the items in the first render. If not provided, recyclerlistview will first render with no items\n    //and then fill in the items based on the size given by its onLayout event. canChangeSize can be set to true to relayout items when\n    //the size changes.\n    layoutSize: PropTypes.object,\n    //iOS only. Scroll throttle duration.\n    scrollThrottle: PropTypes.number,\n    //Specify if size can change, listview will automatically relayout items. For web, works only with useWindowScroll = true\n    canChangeSize: PropTypes.bool,\n    //Web only. Layout elements in window instead of a scrollable div.\n    useWindowScroll: PropTypes.bool,\n    //Turns off recycling. You still get progressive rendering and all other features. Good for lazy rendering. This should not be used in most cases.\n    disableRecycling: PropTypes.bool,\n    //Default is false, if enabled dimensions provided in layout provider will not be strictly enforced.\n    //Rendered dimensions will be used to relayout items. Slower if enabled.\n    forceNonDeterministicRendering: PropTypes.bool,\n    //In some cases the data passed at row level may not contain all the info that the item depends upon, you can keep all other info\n    //outside and pass it down via this prop. Changing this object will cause everything to re-render. Make sure you don't change\n    //it often to ensure performance. Re-renders are heavy.\n    extendedState: PropTypes.object,\n    //Enables animating RecyclerListView item cells e.g, shift, add, remove etc. This prop can be used to pass an external item animation implementation.\n    //Look into BaseItemAnimator/DefaultJSItemAnimator/DefaultNativeItemAnimator/DefaultWebItemAnimator for more info.\n    //By default there are few animations, to disable completely simply pass blank new BaseItemAnimator() object. Remember, create\n    //one object and keep it do not create multiple object of type BaseItemAnimator.\n    //Note: You might want to look into DefaultNativeItemAnimator to check an implementation based on LayoutAnimation. By default,\n    //animations are JS driven to avoid workflow interference. Also, please note LayoutAnimation is buggy on Android.\n    itemAnimator: PropTypes.instanceOf(ItemAnimator_1.BaseItemAnimator),\n    //The Recyclerlistview item cells are enclosed inside this item container. The idea is pass a native UI component which implements a\n    //view shifting algorithm to remove the overlaps between the neighbouring views. This is achieved by shifting them by the appropriate\n    //amount in the correct direction if the estimated sizes of the item cells are not accurate. If this props is passed, it will be used to\n    //enclose the list items and otherwise a default react native View will be used for the same.\n    renderContentContainer: PropTypes.func,\n    //Enables you to utilize layout animations better by unmounting removed items. Please note, this might increase unmounts\n    //on large data changes.\n    optimizeForInsertDeleteAnimations: PropTypes.bool,\n    //To pass down style to inner ScrollView\n    style: PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.number,\n    ]),\n    //For TS use case, not necessary with JS use.\n    //For all props that need to be proxied to inner/external scrollview. Put them in an object and they'll be spread\n    //and passed down.\n    scrollViewProps: PropTypes.object,\n    // Used when the logical offsetY differs from actual offsetY of recyclerlistview, could be because some other component is overlaying the recyclerlistview.\n    // For e.x. toolbar within CoordinatorLayout are overlapping the recyclerlistview.\n    // This method exposes the windowCorrection object of RecyclerListView, user can modify the values in realtime.\n    applyWindowCorrection: PropTypes.func,\n    // This can be used to hook an itemLayoutListener to listen to which item at what index is layout.\n    // To get the layout params of the item, you can use the ref to call method getLayout(index), e.x. : `this._recyclerRef.getLayout(index)`\n    // but there is a catch here, since there might be a pending relayout due to which the queried layout might not be precise.\n    onItemLayout: PropTypes.func,\n};\n//# sourceMappingURL=RecyclerListView.js.map","/root/my-app/src/recyclerlistview/dist/web/core/scrollcomponent/BaseScrollView.js",["204"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar BaseScrollView = /** @class */ (function (_super) {\n    __extends(BaseScrollView, _super);\n    function BaseScrollView(props) {\n        return _super.call(this, props) || this;\n    }\n    return BaseScrollView;\n}(React.Component));\nexports.default = BaseScrollView;\n//# sourceMappingURL=BaseScrollView.js.map","/root/my-app/src/recyclerlistview/dist/web/core/ProgressiveListView.js",["205","206","207"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RecyclerListView_1 = require(\"./RecyclerListView\");\n/**\n * This will incremently update renderAhread distance and render the page progressively.\n */\nvar ProgressiveListView = /** @class */ (function (_super) {\n    __extends(ProgressiveListView, _super);\n    function ProgressiveListView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ProgressiveListView.prototype.componentDidMount = function () {\n        if (_super.prototype.componentDidMount) {\n            _super.prototype.componentDidMount.call(this);\n        }\n        this.updateRenderAheadProgessively(this.getCurrentRenderAheadOffset());\n    };\n    ProgressiveListView.prototype.updateRenderAheadProgessively = function (newVal) {\n        var _this = this;\n        this.cancelRenderAheadUpdate(); // Cancel any pending callback.\n        this.renderAheadUdpateCallbackId = requestAnimationFrame(function () {\n            if (!_this.updateRenderAheadOffset(newVal)) {\n                _this.updateRenderAheadProgessively(newVal);\n            }\n            else {\n                _this.incrementRenderAhead();\n            }\n        });\n    };\n    ProgressiveListView.prototype.incrementRenderAhead = function () {\n        if (this.props.maxRenderAhead && this.props.renderAheadStep) {\n            var layoutManager = this.getVirtualRenderer().getLayoutManager();\n            var currentRenderAheadOffset = this.getCurrentRenderAheadOffset();\n            if (layoutManager) {\n                var contentDimension = layoutManager.getContentDimension();\n                var maxContentSize = this.props.isHorizontal ? contentDimension.width : contentDimension.height;\n                if (currentRenderAheadOffset < maxContentSize && currentRenderAheadOffset < this.props.maxRenderAhead) {\n                    var newRenderAheadOffset = currentRenderAheadOffset + this.props.renderAheadStep;\n                    this.updateRenderAheadProgessively(newRenderAheadOffset);\n                }\n            }\n        }\n    };\n    ProgressiveListView.prototype.cancelRenderAheadUpdate = function () {\n        if (this.renderAheadUdpateCallbackId) {\n            cancelAnimationFrame(this.renderAheadUdpateCallbackId);\n        }\n    };\n    ProgressiveListView.defaultProps = __assign({}, RecyclerListView_1.default.defaultProps, { maxRenderAhead: Number.MAX_VALUE, renderAheadStep: 300, renderAheadOffset: 0 });\n    return ProgressiveListView;\n}(RecyclerListView_1.default));\nexports.default = ProgressiveListView;\n//# sourceMappingURL=ProgressiveListView.js.map","/root/my-app/src/recyclerlistview/dist/web/utils/AutoScroll.js",["208"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AutoScroll = /** @class */ (function () {\n    function AutoScroll() {\n    }\n    AutoScroll.scrollNow = function (scrollable, fromX, fromY, toX, toY, speedMultiplier) {\n        if (speedMultiplier === void 0) { speedMultiplier = 1; }\n        return new Promise(function (resolve) {\n            scrollable.scrollToOffset(fromX, fromY, false);\n            var incrementPerMs = 0.1 * speedMultiplier;\n            var startTime = Date.now();\n            var startX = fromX;\n            var startY = fromY;\n            var animationLoop = function () {\n                requestAnimationFrame(function () {\n                    var currentTime = Date.now();\n                    var timeElapsed = currentTime - startTime;\n                    var distanceToCover = incrementPerMs * timeElapsed;\n                    startX += distanceToCover;\n                    startY += distanceToCover;\n                    scrollable.scrollToOffset(Math.min(toX, startX), Math.min(toY, startY), false);\n                    startTime = currentTime;\n                    if (Math.min(toX, startX) !== toX || Math.min(toY, startY) !== toY) {\n                        animationLoop();\n                        return;\n                    }\n                    resolve();\n                });\n            };\n            animationLoop();\n        });\n    };\n    return AutoScroll;\n}());\nexports.AutoScroll = AutoScroll;\n//# sourceMappingURL=AutoScroll.js.map","/root/my-app/src/recyclerlistview/dist/web/utils/ComponentCompat.js",["209"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\n//Interim solve given we want to be active on old react as well for now.\nvar ComponentCompat = /** @class */ (function (_super) {\n    __extends(ComponentCompat, _super);\n    function ComponentCompat(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this._hasRenderedOnce = false;\n        _this._didPropsChange = false;\n        return _this;\n    }\n    ComponentCompat.prototype.shouldComponentUpdate = function (newProps, newState) {\n        if (this.props !== newProps) {\n            this.componentWillReceivePropsCompat(newProps);\n        }\n        return true;\n    };\n    //setState inside will not update the existing cycle, not a true replacement for componentWillReceiveProps\n    ComponentCompat.prototype.componentWillReceivePropsCompat = function (newProps) {\n        //no op\n    };\n    ComponentCompat.prototype.componentWillMountCompat = function () {\n        //no op\n    };\n    ComponentCompat.prototype.componentWillUpdateCompat = function () {\n        //no op\n    };\n    ComponentCompat.prototype.render = function () {\n        if (!this._hasRenderedOnce) {\n            this._hasRenderedOnce = true;\n            this.componentWillMountCompat();\n        }\n        else {\n            this.componentWillUpdateCompat();\n        }\n        return this.renderCompat();\n    };\n    return ComponentCompat;\n}(React.Component));\nexports.ComponentCompat = ComponentCompat;\n//# sourceMappingURL=ComponentCompat.js.map","/root/my-app/src/recyclerlistview/dist/web/core/layoutmanager/GridLayoutManager.js",["210"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LayoutManager_1 = require(\"./LayoutManager\");\nvar GridLayoutManager = /** @class */ (function (_super) {\n    __extends(GridLayoutManager, _super);\n    function GridLayoutManager(layoutProvider, renderWindowSize, getSpan, maxSpan, acceptableRelayoutDelta, isHorizontal, cachedLayouts) {\n        var _this = _super.call(this, layoutProvider, renderWindowSize, isHorizontal, cachedLayouts) || this;\n        _this._getSpan = getSpan;\n        _this._isGridHorizontal = isHorizontal;\n        _this._renderWindowSize = renderWindowSize;\n        if (acceptableRelayoutDelta < 0) {\n            throw new Error(\"acceptableRelayoutDelta cannot be less than 0\");\n        }\n        else {\n            _this._acceptableRelayoutDelta = acceptableRelayoutDelta;\n        }\n        if (maxSpan <= 0) {\n            throw new Error(\"Max Column Span cannot be less than or equal to 0\");\n        }\n        else {\n            _this._maxSpan = maxSpan;\n        }\n        return _this;\n    }\n    GridLayoutManager.prototype.overrideLayout = function (index, dim) {\n        // we are doing this because - when we provide decimal dimensions for a\n        // certain cell - the onlayout returns a different dimension in certain high end devices.\n        // This causes the layouting to behave weirdly as the new dimension might not adhere to the spans and the cells arrange themselves differently\n        // So, whenever we have layouts for a certain index, we explicitly override the dimension to those very layout values\n        // and call super so as to set the overridden flag as true\n        var layout = this.getLayouts()[index];\n        var heightDiff = Math.abs(dim.height - layout.height);\n        var widthDiff = Math.abs(dim.width - layout.width);\n        if (layout) {\n            if (this._isGridHorizontal) {\n                if (heightDiff < this._acceptableRelayoutDelta) {\n                    if (widthDiff === 0) {\n                        return false;\n                    }\n                    dim.height = layout.height;\n                }\n            }\n            else {\n                if (widthDiff < this._acceptableRelayoutDelta) {\n                    if (heightDiff === 0) {\n                        return false;\n                    }\n                    dim.width = layout.width;\n                }\n            }\n        }\n        return _super.prototype.overrideLayout.call(this, index, dim);\n    };\n    GridLayoutManager.prototype.getStyleOverridesForIndex = function (index) {\n        var columnSpanForIndex = this._getSpan(index);\n        return this._isGridHorizontal\n            ? {\n                height: (this._renderWindowSize.height / this._maxSpan) * columnSpanForIndex,\n            }\n            : {\n                width: (this._renderWindowSize.width / this._maxSpan) * columnSpanForIndex,\n            };\n    };\n    return GridLayoutManager;\n}(LayoutManager_1.WrapGridLayoutManager));\nexports.GridLayoutManager = GridLayoutManager;\n//# sourceMappingURL=GridLayoutManager.js.map","/root/my-app/src/recyclerlistview/dist/web/core/layoutmanager/LayoutManager.js",["211"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CustomError_1 = require(\"../exceptions/CustomError\");\nvar LayoutManager = /** @class */ (function () {\n    function LayoutManager() {\n    }\n    LayoutManager.prototype.getOffsetForIndex = function (index) {\n        var layouts = this.getLayouts();\n        if (layouts.length > index) {\n            return { x: layouts[index].x, y: layouts[index].y };\n        }\n        else {\n            throw new CustomError_1.default({\n                message: \"No layout available for index: \" + index,\n                type: \"LayoutUnavailableException\",\n            });\n        }\n    };\n    //You can ovveride this incase you want to override style in some cases e.g, say you want to enfore width but not height\n    LayoutManager.prototype.getStyleOverridesForIndex = function (index) {\n        return undefined;\n    };\n    return LayoutManager;\n}());\nexports.LayoutManager = LayoutManager;\nvar WrapGridLayoutManager = /** @class */ (function (_super) {\n    __extends(WrapGridLayoutManager, _super);\n    function WrapGridLayoutManager(layoutProvider, renderWindowSize, isHorizontal, cachedLayouts) {\n        if (isHorizontal === void 0) { isHorizontal = false; }\n        var _this = _super.call(this) || this;\n        _this._layoutProvider = layoutProvider;\n        _this._window = renderWindowSize;\n        _this._totalHeight = 0;\n        _this._totalWidth = 0;\n        _this._isHorizontal = !!isHorizontal;\n        _this._layouts = cachedLayouts ? cachedLayouts : [];\n        return _this;\n    }\n    WrapGridLayoutManager.prototype.getContentDimension = function () {\n        return { height: this._totalHeight, width: this._totalWidth };\n    };\n    WrapGridLayoutManager.prototype.getLayouts = function () {\n        return this._layouts;\n    };\n    WrapGridLayoutManager.prototype.getOffsetForIndex = function (index) {\n        if (this._layouts.length > index) {\n            return { x: this._layouts[index].x, y: this._layouts[index].y };\n        }\n        else {\n            throw new CustomError_1.default({\n                message: \"No layout available for index: \" + index,\n                type: \"LayoutUnavailableException\",\n            });\n        }\n    };\n    WrapGridLayoutManager.prototype.overrideLayout = function (index, dim) {\n        var layout = this._layouts[index];\n        if (layout) {\n            layout.isOverridden = true;\n            layout.width = dim.width;\n            layout.height = dim.height;\n        }\n        return true;\n    };\n    WrapGridLayoutManager.prototype.setMaxBounds = function (itemDim) {\n        if (this._isHorizontal) {\n            itemDim.height = Math.min(this._window.height, itemDim.height);\n        }\n        else {\n            itemDim.width = Math.min(this._window.width, itemDim.width);\n        }\n    };\n    //TODO:Talha laziliy calculate in future revisions\n    WrapGridLayoutManager.prototype.relayoutFromIndex = function (startIndex, itemCount) {\n        startIndex = this._locateFirstNeighbourIndex(startIndex);\n        var startX = 0;\n        var startY = 0;\n        var maxBound = 0;\n        var startVal = this._layouts[startIndex];\n        if (startVal) {\n            startX = startVal.x;\n            startY = startVal.y;\n            this._pointDimensionsToRect(startVal);\n        }\n        var oldItemCount = this._layouts.length;\n        var itemDim = { height: 0, width: 0 };\n        var itemRect = null;\n        var oldLayout = null;\n        for (var i = startIndex; i < itemCount; i++) {\n            oldLayout = this._layouts[i];\n            var layoutType = this._layoutProvider.getLayoutTypeForIndex(i);\n            if (oldLayout && oldLayout.isOverridden && oldLayout.type === layoutType) {\n                itemDim.height = oldLayout.height;\n                itemDim.width = oldLayout.width;\n            }\n            else {\n                this._layoutProvider.setComputedLayout(layoutType, itemDim, i);\n            }\n            this.setMaxBounds(itemDim);\n            while (!this._checkBounds(startX, startY, itemDim, this._isHorizontal)) {\n                if (this._isHorizontal) {\n                    startX += maxBound;\n                    startY = 0;\n                    this._totalWidth += maxBound;\n                }\n                else {\n                    startX = 0;\n                    startY += maxBound;\n                    this._totalHeight += maxBound;\n                }\n                maxBound = 0;\n            }\n            maxBound = this._isHorizontal ? Math.max(maxBound, itemDim.width) : Math.max(maxBound, itemDim.height);\n            //TODO: Talha creating array upfront will speed this up\n            if (i > oldItemCount - 1) {\n                this._layouts.push({ x: startX, y: startY, height: itemDim.height, width: itemDim.width, type: layoutType });\n            }\n            else {\n                itemRect = this._layouts[i];\n                itemRect.x = startX;\n                itemRect.y = startY;\n                itemRect.type = layoutType;\n                itemRect.width = itemDim.width;\n                itemRect.height = itemDim.height;\n            }\n            if (this._isHorizontal) {\n                startY += itemDim.height;\n            }\n            else {\n                startX += itemDim.width;\n            }\n        }\n        if (oldItemCount > itemCount) {\n            this._layouts.splice(itemCount, oldItemCount - itemCount);\n        }\n        this._setFinalDimensions(maxBound);\n    };\n    WrapGridLayoutManager.prototype._pointDimensionsToRect = function (itemRect) {\n        if (this._isHorizontal) {\n            this._totalWidth = itemRect.x;\n        }\n        else {\n            this._totalHeight = itemRect.y;\n        }\n    };\n    WrapGridLayoutManager.prototype._setFinalDimensions = function (maxBound) {\n        if (this._isHorizontal) {\n            this._totalHeight = this._window.height;\n            this._totalWidth += maxBound;\n        }\n        else {\n            this._totalWidth = this._window.width;\n            this._totalHeight += maxBound;\n        }\n    };\n    WrapGridLayoutManager.prototype._locateFirstNeighbourIndex = function (startIndex) {\n        if (startIndex === 0) {\n            return 0;\n        }\n        var i = startIndex - 1;\n        for (; i >= 0; i--) {\n            if (this._isHorizontal) {\n                if (this._layouts[i].y === 0) {\n                    break;\n                }\n            }\n            else if (this._layouts[i].x === 0) {\n                break;\n            }\n        }\n        return i;\n    };\n    WrapGridLayoutManager.prototype._checkBounds = function (itemX, itemY, itemDim, isHorizontal) {\n        return isHorizontal ? (itemY + itemDim.height <= this._window.height) : (itemX + itemDim.width <= this._window.width);\n    };\n    return WrapGridLayoutManager;\n}(LayoutManager));\nexports.WrapGridLayoutManager = WrapGridLayoutManager;\n//# sourceMappingURL=LayoutManager.js.map","/root/my-app/src/recyclerlistview/dist/web/core/VirtualRenderer.js",["212","213","214","215","216","217"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RecycleItemPool_1 = require(\"../utils/RecycleItemPool\");\nvar CustomError_1 = require(\"./exceptions/CustomError\");\nvar RecyclerListViewExceptions_1 = require(\"./exceptions/RecyclerListViewExceptions\");\nvar ViewabilityTracker_1 = require(\"./ViewabilityTracker\");\nvar ts_object_utils_1 = require(\"ts-object-utils\");\nvar TSCast_1 = require(\"../utils/TSCast\");\nvar VirtualRenderer = /** @class */ (function () {\n    function VirtualRenderer(renderStackChanged, scrollOnNextUpdate, fetchStableId, isRecyclingEnabled) {\n        var _this = this;\n        this._layoutProvider = TSCast_1.default.cast(null); //TSI\n        this._recyclePool = TSCast_1.default.cast(null); //TSI\n        this._layoutManager = null;\n        this._viewabilityTracker = null;\n        this._onVisibleItemsChanged = function (all, now, notNow) {\n            if (_this.onVisibleItemsChanged) {\n                _this.onVisibleItemsChanged(all, now, notNow);\n            }\n        };\n        this._onEngagedItemsChanged = function (all, now, notNow) {\n            var count = notNow.length;\n            var resolvedKey;\n            var disengagedIndex = 0;\n            if (_this._isRecyclingEnabled) {\n                for (var i = 0; i < count; i++) {\n                    disengagedIndex = notNow[i];\n                    delete _this._engagedIndexes[disengagedIndex];\n                    if (_this._params && disengagedIndex < _this._params.itemCount) {\n                        //All the items which are now not visible can go to the recycle pool, the pool only needs to maintain keys since\n                        //react can link a view to a key automatically\n                        resolvedKey = _this._stableIdToRenderKeyMap[_this._fetchStableId(disengagedIndex)];\n                        if (!ts_object_utils_1.ObjectUtil.isNullOrUndefined(resolvedKey)) {\n                            _this._recyclePool.putRecycledObject(_this._layoutProvider.getLayoutTypeForIndex(disengagedIndex), resolvedKey.key);\n                        }\n                    }\n                }\n            }\n            if (_this._updateRenderStack(now)) {\n                //Ask Recycler View to update itself\n                _this._renderStackChanged(_this._renderStack);\n            }\n        };\n        //Keeps track of items that need to be rendered in the next render cycle\n        this._renderStack = {};\n        this._fetchStableId = fetchStableId;\n        //Keeps track of keys of all the currently rendered indexes, can eventually replace renderStack as well if no new use cases come up\n        this._stableIdToRenderKeyMap = {};\n        this._engagedIndexes = {};\n        this._renderStackChanged = renderStackChanged;\n        this._scrollOnNextUpdate = scrollOnNextUpdate;\n        this._dimensions = null;\n        this._params = null;\n        this._isRecyclingEnabled = isRecyclingEnabled;\n        this._isViewTrackerRunning = false;\n        this._markDirty = false;\n        //Would be surprised if someone exceeds this\n        this._startKey = 0;\n        this.onVisibleItemsChanged = null;\n    }\n    VirtualRenderer.prototype.getLayoutDimension = function () {\n        if (this._layoutManager) {\n            return this._layoutManager.getContentDimension();\n        }\n        return { height: 0, width: 0 };\n    };\n    VirtualRenderer.prototype.updateOffset = function (offsetX, offsetY, isActual, correction) {\n        if (this._viewabilityTracker) {\n            var offset = this._params && this._params.isHorizontal ? offsetX : offsetY;\n            if (!this._isViewTrackerRunning) {\n                if (isActual) {\n                    this._viewabilityTracker.setActualOffset(offset);\n                }\n                this.startViewabilityTracker(correction);\n            }\n            this._viewabilityTracker.updateOffset(offset, isActual, correction);\n        }\n    };\n    VirtualRenderer.prototype.attachVisibleItemsListener = function (callback) {\n        this.onVisibleItemsChanged = callback;\n    };\n    VirtualRenderer.prototype.removeVisibleItemsListener = function () {\n        this.onVisibleItemsChanged = null;\n        if (this._viewabilityTracker) {\n            this._viewabilityTracker.onVisibleRowsChanged = null;\n        }\n    };\n    VirtualRenderer.prototype.getLayoutManager = function () {\n        return this._layoutManager;\n    };\n    VirtualRenderer.prototype.setParamsAndDimensions = function (params, dim) {\n        this._params = params;\n        this._dimensions = dim;\n    };\n    VirtualRenderer.prototype.setLayoutManager = function (layoutManager) {\n        this._layoutManager = layoutManager;\n        if (this._params) {\n            this._layoutManager.relayoutFromIndex(0, this._params.itemCount);\n        }\n    };\n    VirtualRenderer.prototype.setLayoutProvider = function (layoutProvider) {\n        this._layoutProvider = layoutProvider;\n    };\n    VirtualRenderer.prototype.getViewabilityTracker = function () {\n        return this._viewabilityTracker;\n    };\n    VirtualRenderer.prototype.refreshWithAnchor = function () {\n        if (this._viewabilityTracker) {\n            var firstVisibleIndex = this._viewabilityTracker.findFirstLogicallyVisibleIndex();\n            this._prepareViewabilityTracker();\n            var offset = 0;\n            if (this._layoutManager && this._params) {\n                firstVisibleIndex = Math.min(this._params.itemCount - 1, firstVisibleIndex);\n                var point = this._layoutManager.getOffsetForIndex(firstVisibleIndex);\n                this._scrollOnNextUpdate(point);\n                offset = this._params.isHorizontal ? point.x : point.y;\n            }\n            this._viewabilityTracker.forceRefreshWithOffset(offset);\n        }\n    };\n    VirtualRenderer.prototype.refresh = function () {\n        if (this._viewabilityTracker) {\n            this._prepareViewabilityTracker();\n            if (this._viewabilityTracker.forceRefresh()) {\n                if (this._params && this._params.isHorizontal) {\n                    this._scrollOnNextUpdate({ x: this._viewabilityTracker.getLastActualOffset(), y: 0 });\n                }\n                else {\n                    this._scrollOnNextUpdate({ x: 0, y: this._viewabilityTracker.getLastActualOffset() });\n                }\n            }\n        }\n    };\n    VirtualRenderer.prototype.getInitialOffset = function () {\n        var offset = { x: 0, y: 0 };\n        if (this._params) {\n            var initialRenderIndex = ts_object_utils_1.Default.value(this._params.initialRenderIndex, 0);\n            if (initialRenderIndex > 0 && this._layoutManager) {\n                offset = this._layoutManager.getOffsetForIndex(initialRenderIndex);\n                this._params.initialOffset = this._params.isHorizontal ? offset.x : offset.y;\n            }\n            else {\n                if (this._params.isHorizontal) {\n                    offset.x = ts_object_utils_1.Default.value(this._params.initialOffset, 0);\n                    offset.y = 0;\n                }\n                else {\n                    offset.y = ts_object_utils_1.Default.value(this._params.initialOffset, 0);\n                    offset.x = 0;\n                }\n            }\n        }\n        return offset;\n    };\n    VirtualRenderer.prototype.init = function () {\n        this.getInitialOffset();\n        this._recyclePool = new RecycleItemPool_1.default();\n        if (this._params) {\n            this._viewabilityTracker = new ViewabilityTracker_1.default(ts_object_utils_1.Default.value(this._params.renderAheadOffset, 0), ts_object_utils_1.Default.value(this._params.initialOffset, 0));\n        }\n        else {\n            this._viewabilityTracker = new ViewabilityTracker_1.default(0, 0);\n        }\n        this._prepareViewabilityTracker();\n    };\n    VirtualRenderer.prototype.startViewabilityTracker = function (windowCorrection) {\n        if (this._viewabilityTracker) {\n            this._isViewTrackerRunning = true;\n            this._viewabilityTracker.init(windowCorrection);\n        }\n    };\n    VirtualRenderer.prototype.syncAndGetKey = function (index, overrideStableIdProvider, newRenderStack) {\n        var getStableId = overrideStableIdProvider ? overrideStableIdProvider : this._fetchStableId;\n        var renderStack = newRenderStack ? newRenderStack : this._renderStack;\n        var stableIdItem = this._stableIdToRenderKeyMap[getStableId(index)];\n        var key = stableIdItem ? stableIdItem.key : undefined;\n        if (ts_object_utils_1.ObjectUtil.isNullOrUndefined(key)) {\n            var type = this._layoutProvider.getLayoutTypeForIndex(index);\n            key = this._recyclePool.getRecycledObject(type);\n            if (!ts_object_utils_1.ObjectUtil.isNullOrUndefined(key)) {\n                var itemMeta = renderStack[key];\n                if (itemMeta) {\n                    var oldIndex = itemMeta.dataIndex;\n                    itemMeta.dataIndex = index;\n                    if (!ts_object_utils_1.ObjectUtil.isNullOrUndefined(oldIndex) && oldIndex !== index) {\n                        delete this._stableIdToRenderKeyMap[getStableId(oldIndex)];\n                    }\n                }\n                else {\n                    renderStack[key] = { dataIndex: index };\n                }\n            }\n            else {\n                key = getStableId(index);\n                if (renderStack[key]) {\n                    //Probable collision, warn and avoid\n                    //TODO: Disabled incorrectly triggering in some cases\n                    //console.warn(\"Possible stableId collision @\", index); //tslint:disable-line\n                    key = this._getCollisionAvoidingKey();\n                }\n                renderStack[key] = { dataIndex: index };\n            }\n            this._markDirty = true;\n            this._stableIdToRenderKeyMap[getStableId(index)] = { key: key, type: type };\n        }\n        if (!ts_object_utils_1.ObjectUtil.isNullOrUndefined(this._engagedIndexes[index])) {\n            this._recyclePool.removeFromPool(key);\n        }\n        var stackItem = renderStack[key];\n        if (stackItem && stackItem.dataIndex !== index) {\n            //Probable collision, warn\n            console.warn(\"Possible stableId collision @\", index); //tslint:disable-line\n        }\n        return key;\n    };\n    //Further optimize in later revision, pretty fast for now considering this is a low frequency event\n    VirtualRenderer.prototype.handleDataSetChange = function (newDataProvider, shouldOptimizeForAnimations) {\n        var getStableId = newDataProvider.getStableId;\n        var maxIndex = newDataProvider.getSize() - 1;\n        var activeStableIds = {};\n        var newRenderStack = {};\n        //Compute active stable ids and stale active keys and resync render stack\n        for (var key in this._renderStack) {\n            if (this._renderStack.hasOwnProperty(key)) {\n                var index = this._renderStack[key].dataIndex;\n                if (!ts_object_utils_1.ObjectUtil.isNullOrUndefined(index)) {\n                    if (index <= maxIndex) {\n                        var stableId = getStableId(index);\n                        activeStableIds[stableId] = 1;\n                    }\n                }\n            }\n        }\n        //Clean stable id to key map\n        var oldActiveStableIds = Object.keys(this._stableIdToRenderKeyMap);\n        var oldActiveStableIdsCount = oldActiveStableIds.length;\n        for (var i = 0; i < oldActiveStableIdsCount; i++) {\n            var key = oldActiveStableIds[i];\n            if (!activeStableIds[key]) {\n                if (!shouldOptimizeForAnimations && this._isRecyclingEnabled) {\n                    var stableIdItem = this._stableIdToRenderKeyMap[key];\n                    if (stableIdItem) {\n                        this._recyclePool.putRecycledObject(stableIdItem.type, stableIdItem.key);\n                    }\n                }\n                delete this._stableIdToRenderKeyMap[key];\n            }\n        }\n        for (var key in this._renderStack) {\n            if (this._renderStack.hasOwnProperty(key)) {\n                var index = this._renderStack[key].dataIndex;\n                if (!ts_object_utils_1.ObjectUtil.isNullOrUndefined(index)) {\n                    if (index <= maxIndex) {\n                        var newKey = this.syncAndGetKey(index, getStableId, newRenderStack);\n                        var newStackItem = newRenderStack[newKey];\n                        if (!newStackItem) {\n                            newRenderStack[newKey] = { dataIndex: index };\n                        }\n                        else if (newStackItem.dataIndex !== index) {\n                            var cllKey = this._getCollisionAvoidingKey();\n                            newRenderStack[cllKey] = { dataIndex: index };\n                            this._stableIdToRenderKeyMap[getStableId(index)] = {\n                                key: cllKey, type: this._layoutProvider.getLayoutTypeForIndex(index),\n                            };\n                        }\n                    }\n                }\n                delete this._renderStack[key];\n            }\n        }\n        Object.assign(this._renderStack, newRenderStack);\n        for (var key in this._renderStack) {\n            if (this._renderStack.hasOwnProperty(key)) {\n                var index = this._renderStack[key].dataIndex;\n                if (!ts_object_utils_1.ObjectUtil.isNullOrUndefined(index) && ts_object_utils_1.ObjectUtil.isNullOrUndefined(this._engagedIndexes[index])) {\n                    var type = this._layoutProvider.getLayoutTypeForIndex(index);\n                    this._recyclePool.putRecycledObject(type, key);\n                }\n            }\n        }\n    };\n    VirtualRenderer.prototype._getCollisionAvoidingKey = function () {\n        return \"#\" + this._startKey++ + \"_rlv_c\";\n    };\n    VirtualRenderer.prototype._prepareViewabilityTracker = function () {\n        if (this._viewabilityTracker && this._layoutManager && this._dimensions && this._params) {\n            this._viewabilityTracker.onEngagedRowsChanged = this._onEngagedItemsChanged;\n            if (this.onVisibleItemsChanged) {\n                this._viewabilityTracker.onVisibleRowsChanged = this._onVisibleItemsChanged;\n            }\n            this._viewabilityTracker.setLayouts(this._layoutManager.getLayouts(), this._params.isHorizontal ?\n                this._layoutManager.getContentDimension().width :\n                this._layoutManager.getContentDimension().height);\n            this._viewabilityTracker.setDimensions({\n                height: this._dimensions.height,\n                width: this._dimensions.width,\n            }, ts_object_utils_1.Default.value(this._params.isHorizontal, false));\n        }\n        else {\n            throw new CustomError_1.default(RecyclerListViewExceptions_1.default.initializationException);\n        }\n    };\n    //Updates render stack and reports whether anything has changed\n    VirtualRenderer.prototype._updateRenderStack = function (itemIndexes) {\n        this._markDirty = false;\n        var count = itemIndexes.length;\n        var index = 0;\n        var hasRenderStackChanged = false;\n        for (var i = 0; i < count; i++) {\n            index = itemIndexes[i];\n            this._engagedIndexes[index] = 1;\n            this.syncAndGetKey(index);\n            hasRenderStackChanged = this._markDirty;\n        }\n        this._markDirty = false;\n        return hasRenderStackChanged;\n    };\n    return VirtualRenderer;\n}());\nexports.default = VirtualRenderer;\n//# sourceMappingURL=VirtualRenderer.js.map","/root/my-app/src/recyclerlistview/dist/web/core/exceptions/CustomError.js",["218"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CustomError = /** @class */ (function (_super) {\n    __extends(CustomError, _super);\n    function CustomError(exception) {\n        var _this = _super.call(this, exception.message) || this;\n        _this.name = exception.type;\n        return _this;\n    }\n    return CustomError;\n}(Error));\nexports.default = CustomError;\n//# sourceMappingURL=CustomError.js.map","/root/my-app/src/recyclerlistview/dist/web/core/constants/Constants.js",["219"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Constants = {\n    CONTEXT_PROVIDER_OFFSET_KEY_SUFFIX: \"_offset\",\n    CONTEXT_PROVIDER_LAYOUT_KEY_SUFFIX: \"_layouts\",\n};\n//# sourceMappingURL=Constants.js.map","/root/my-app/src/recyclerlistview/dist/web/core/exceptions/RecyclerListViewExceptions.js",["220"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RecyclerListViewExceptions = {\n    initializationException: {\n        message: \"Parameters required for initializing the module are missing\",\n        type: \"Initialization essentials missing\",\n    },\n    itemBoundsException: {\n        message: \"Dimensions cannot be undefined or null, check if LayoutProvider returns irregular values\",\n        type: \"ItemBoundsException\",\n    },\n    itemTypeNullException: {\n        message: \"RecyclerListView items always require a type, check if LayoutProvider returns irregular values\",\n        type: \"ItemTypeNullException\",\n    },\n    layoutException: {\n        message: \"RecyclerListView needs to have a bounded size. Currently height or, width is 0.\" +\n            \"Consider adding style={{flex:1}} or, fixed dimensions\",\n        type: \"LayoutException\",\n    },\n    platformNotDetectedException: {\n        message: \"Unable to detect the running platform, if you're trying to run recyclerlistview \" +\n            \"in browser make sure process.env.RLV_ENV is set to browser in webpack config\",\n        type: \"PlatformNotDetectedException\",\n    },\n    unresolvedDependenciesException: {\n        message: \"missing datasource or layout provider, cannot proceed without it\",\n        type: \"UnresolvedDependenciesException\",\n    },\n    refNotAsFunctionException: {\n        message: \"When using StickyContainer, RecyclerListView needs to use ref as a function and not as a string.\",\n        type: \"RefNotAsFunctionException\",\n    },\n    wrongStickyChildTypeException: {\n        message: \"StickyContainer can only have a single child of type RecyclerListView.\",\n        type: \"WrongStickyChildTypeException\",\n    },\n    usingOldVisibleIndexesChangedParam: {\n        message: \"onVisibleIndexesChanged has been deprecated. Please use onVisibleIndicesChanged instead.\",\n        type: \"usingOldVisibleIndexesChangedParam\",\n    },\n    stickyIndicesArraySortError: {\n        message: \"The sticky indices array passed to StickyContainer isn't sorted in ascending order.\",\n        type: \"stickyIndicesArraySortError\",\n    },\n};\nexports.default = RecyclerListViewExceptions;\n//# sourceMappingURL=RecyclerListViewExceptions.js.map","/root/my-app/src/recyclerlistview/dist/web/core/constants/Messages.js",["221"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Messages = {\n    ERROR_LISTVIEW_VALIDATION: \"missing datasource or layout provider, cannot proceed without it\",\n    WARN_SCROLL_TO_INDEX: \"scrollTo was called before RecyclerListView was measured, please wait for the mount to finish\",\n    WARN_NO_DATA: \"You have mounted RecyclerListView with an empty data provider (Size in 0). Please mount only if there is atleast one item \" +\n        \"to ensure optimal performance and to avoid unexpected behavior\",\n    VISIBLE_INDEXES_CHANGED_DEPRECATED: \"onVisibleIndexesChanged deprecated. Please use onVisibleIndicesChanged instead.\",\n};\n//# sourceMappingURL=Messages.js.map","/root/my-app/src/recyclerlistview/dist/web/platform/web/viewrenderer/ViewRenderer.js",["222","223","224"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar BaseViewRenderer_1 = require(\"../../../core/viewrenderer/BaseViewRenderer\");\n/***\n * View renderer is responsible for creating a container of size provided by LayoutProvider and render content inside it.\n * Also enforces a logic to prevent re renders. RecyclerListView keeps moving these ViewRendereres around using transforms to enable recycling.\n * View renderer will only update if its position, dimensions or given data changes. Make sure to have a relevant shouldComponentUpdate as well.\n * This is second of the two things recycler works on. Implemented both for web and react native.\n */\nvar ViewRenderer = /** @class */ (function (_super) {\n    __extends(ViewRenderer, _super);\n    function ViewRenderer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._dim = { width: 0, height: 0 };\n        _this._mainDiv = null;\n        _this._setRef = function (div) {\n            _this._mainDiv = div;\n        };\n        return _this;\n    }\n    ViewRenderer.prototype.componentDidMount = function () {\n        if (_super.prototype.componentDidMount) {\n            _super.prototype.componentDidMount.call(this);\n        }\n        this._checkSizeChange();\n    };\n    ViewRenderer.prototype.componentDidUpdate = function () {\n        this._checkSizeChange();\n    };\n    ViewRenderer.prototype.renderCompat = function () {\n        var style = this.props.forceNonDeterministicRendering\n            ? __assign({ transform: this._getTransform(), WebkitTransform: this._getTransform() }, styles.baseViewStyle, this.props.styleOverrides, this.animatorStyleOverrides) : __assign({ height: this.props.height, overflow: \"hidden\", width: this.props.width, transform: this._getTransform(), WebkitTransform: this._getTransform() }, styles.baseViewStyle, this.props.styleOverrides, this.animatorStyleOverrides);\n        return (React.createElement(\"div\", { ref: this._setRef, style: style }, this.renderChild()));\n    };\n    ViewRenderer.prototype.getRef = function () {\n        return this._mainDiv;\n    };\n    ViewRenderer.prototype._getTransform = function () {\n        return \"translate(\" + this.props.x + \"px,\" + this.props.y + \"px)\";\n    };\n    ViewRenderer.prototype._checkSizeChange = function () {\n        if (this.props.forceNonDeterministicRendering && this.props.onSizeChanged) {\n            var mainDiv = this._mainDiv;\n            if (mainDiv) {\n                this._dim.width = mainDiv.clientWidth;\n                this._dim.height = mainDiv.clientHeight;\n                if (this.props.width !== this._dim.width || this.props.height !== this._dim.height) {\n                    this.props.onSizeChanged(this._dim, this.props.index);\n                }\n            }\n        }\n        this._onItemRendered();\n    };\n    ViewRenderer.prototype._onItemRendered = function () {\n        if (this.props.onItemLayout) {\n            this.props.onItemLayout(this.props.index);\n        }\n    };\n    return ViewRenderer;\n}(BaseViewRenderer_1.default));\nexports.default = ViewRenderer;\nvar styles = {\n    baseViewStyle: {\n        alignItems: \"stretch\",\n        borderWidth: 0,\n        borderStyle: \"solid\",\n        boxSizing: \"border-box\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        minHeight: 0,\n        minWidth: 0,\n        left: 0,\n        top: 0,\n    },\n};\n//# sourceMappingURL=ViewRenderer.js.map","/root/my-app/src/recyclerlistview/dist/web/platform/web/scrollcomponent/ScrollComponent.js",["225"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar BaseScrollComponent_1 = require(\"../../../core/scrollcomponent/BaseScrollComponent\");\nvar ScrollViewer_1 = require(\"./ScrollViewer\");\n/***\n * The responsibility of a scroll component is to report its size, scroll events and provide a way to scroll to a given offset.\n * RecyclerListView works on top of this interface and doesn't care about the implementation. To support web we only had to provide\n * another component written on top of web elements\n */\nvar ScrollComponent = /** @class */ (function (_super) {\n    __extends(ScrollComponent, _super);\n    function ScrollComponent(args) {\n        var _this = _super.call(this, args) || this;\n        _this._scrollViewRef = null;\n        _this._onScroll = function (e) {\n            _this.props.onScroll(e.nativeEvent.contentOffset.x, e.nativeEvent.contentOffset.y, e);\n        };\n        _this._onSizeChanged = function (event) {\n            if (_this.props.onSizeChanged) {\n                _this.props.onSizeChanged(event);\n            }\n        };\n        _this._height = 0;\n        _this._width = 0;\n        return _this;\n    }\n    ScrollComponent.prototype.scrollTo = function (x, y, animated) {\n        if (this._scrollViewRef) {\n            this._scrollViewRef.scrollTo({ x: x, y: y, animated: animated });\n        }\n    };\n    ScrollComponent.prototype.render = function () {\n        var _this = this;\n        var Scroller = this.props.externalScrollView; //TSI\n        return (React.createElement(Scroller, __assign({ ref: function (scrollView) { return _this._scrollViewRef = scrollView; } }, this.props, { horizontal: this.props.isHorizontal, onScroll: this._onScroll, onSizeChanged: this._onSizeChanged }),\n            React.createElement(\"div\", { style: {\n                    height: this.props.contentHeight,\n                    width: this.props.contentWidth,\n                } }, this.props.children),\n            this.props.renderFooter ? React.createElement(\"div\", { style: this.props.isHorizontal ? {\n                    left: this.props.contentWidth,\n                    position: \"absolute\",\n                    top: 0,\n                } : undefined }, this.props.renderFooter()) : null));\n    };\n    ScrollComponent.defaultProps = {\n        contentHeight: 0,\n        contentWidth: 0,\n        externalScrollView: ScrollViewer_1.default,\n        isHorizontal: false,\n        scrollThrottle: 16,\n        canChangeSize: false,\n    };\n    return ScrollComponent;\n}(BaseScrollComponent_1.default));\nexports.default = ScrollComponent;\n//# sourceMappingURL=ScrollComponent.js.map","/root/my-app/src/recyclerlistview/dist/web/utils/RecycleItemPool.js",["226"],"\"use strict\";\n/***\n * Recycle pool for maintaining recyclable items, supports segregation by type as well.\n * Availability check, add/remove etc are all O(1), uses two maps to achieve constant time operation\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RecycleItemPool = /** @class */ (function () {\n    function RecycleItemPool() {\n        this._recyclableObjectMap = {};\n        this._availabilitySet = {};\n    }\n    RecycleItemPool.prototype.putRecycledObject = function (objectType, object) {\n        objectType = this._stringify(objectType);\n        var objectSet = this._getRelevantSet(objectType);\n        if (!this._availabilitySet[object]) {\n            objectSet[object] = null;\n            this._availabilitySet[object] = objectType;\n        }\n    };\n    RecycleItemPool.prototype.getRecycledObject = function (objectType) {\n        objectType = this._stringify(objectType);\n        var objectSet = this._getRelevantSet(objectType);\n        var recycledObject;\n        for (var property in objectSet) {\n            if (objectSet.hasOwnProperty(property)) {\n                recycledObject = property;\n                break;\n            }\n        }\n        if (recycledObject) {\n            delete objectSet[recycledObject];\n            delete this._availabilitySet[recycledObject];\n        }\n        return recycledObject;\n    };\n    RecycleItemPool.prototype.removeFromPool = function (object) {\n        if (this._availabilitySet[object]) {\n            delete this._getRelevantSet(this._availabilitySet[object])[object];\n            delete this._availabilitySet[object];\n            return true;\n        }\n        return false;\n    };\n    RecycleItemPool.prototype.clearAll = function () {\n        this._recyclableObjectMap = {};\n        this._availabilitySet = {};\n    };\n    RecycleItemPool.prototype._getRelevantSet = function (objectType) {\n        var objectSet = this._recyclableObjectMap[objectType];\n        if (!objectSet) {\n            objectSet = {};\n            this._recyclableObjectMap[objectType] = objectSet;\n        }\n        return objectSet;\n    };\n    RecycleItemPool.prototype._stringify = function (objectType) {\n        if (typeof objectType === \"number\") {\n            objectType = objectType.toString();\n        }\n        return objectType;\n    };\n    return RecycleItemPool;\n}());\nexports.default = RecycleItemPool;\n//# sourceMappingURL=RecycleItemPool.js.map","/root/my-app/src/recyclerlistview/dist/web/utils/TSCast.js",["227"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSCast = /** @class */ (function () {\n    function TSCast() {\n    }\n    TSCast.cast = function (object) {\n        return object;\n    };\n    return TSCast;\n}());\nexports.default = TSCast;\n//# sourceMappingURL=TSCast.js.map","/root/my-app/src/recyclerlistview/dist/web/core/ViewabilityTracker.js",["228"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BinarySearch_1 = require(\"../utils/BinarySearch\");\nvar ViewabilityTracker = /** @class */ (function () {\n    function ViewabilityTracker(renderAheadOffset, initialOffset) {\n        var _this = this;\n        this._layouts = [];\n        this._valueExtractorForBinarySearch = function (index) {\n            var itemRect = _this._layouts[index];\n            _this._setRelevantBounds(itemRect, _this._relevantDim);\n            return _this._relevantDim.end;\n        };\n        this._currentOffset = Math.max(0, initialOffset);\n        this._maxOffset = 0;\n        this._actualOffset = 0;\n        this._renderAheadOffset = renderAheadOffset;\n        this._visibleWindow = { start: 0, end: 0 };\n        this._engagedWindow = { start: 0, end: 0 };\n        this._isHorizontal = false;\n        this._windowBound = 0;\n        this._visibleIndexes = []; //needs to be sorted\n        this._engagedIndexes = []; //needs to be sorted\n        this.onVisibleRowsChanged = null;\n        this.onEngagedRowsChanged = null;\n        this._relevantDim = { start: 0, end: 0 };\n        this._defaultCorrection = { startCorrection: 0, endCorrection: 0, windowShift: 0 };\n    }\n    ViewabilityTracker.prototype.init = function (windowCorrection) {\n        this._doInitialFit(this._currentOffset, windowCorrection);\n    };\n    ViewabilityTracker.prototype.setLayouts = function (layouts, maxOffset) {\n        this._layouts = layouts;\n        this._maxOffset = maxOffset;\n    };\n    ViewabilityTracker.prototype.setDimensions = function (dimension, isHorizontal) {\n        this._isHorizontal = isHorizontal;\n        this._windowBound = isHorizontal ? dimension.width : dimension.height;\n    };\n    ViewabilityTracker.prototype.forceRefresh = function () {\n        var shouldForceScroll = this._currentOffset >= (this._maxOffset - this._windowBound);\n        this.forceRefreshWithOffset(this._currentOffset);\n        return shouldForceScroll;\n    };\n    ViewabilityTracker.prototype.forceRefreshWithOffset = function (offset) {\n        this._currentOffset = -1;\n        this.updateOffset(offset, false, this._defaultCorrection);\n    };\n    ViewabilityTracker.prototype.updateOffset = function (offset, isActual, windowCorrection) {\n        var correctedOffset = offset;\n        if (isActual) {\n            this._actualOffset = offset;\n            correctedOffset = Math.min(this._maxOffset, Math.max(0, offset + (windowCorrection.windowShift + windowCorrection.startCorrection)));\n        }\n        if (this._currentOffset !== correctedOffset) {\n            this._currentOffset = correctedOffset;\n            this._updateTrackingWindows(offset, windowCorrection);\n            var startIndex = 0;\n            if (this._visibleIndexes.length > 0) {\n                startIndex = this._visibleIndexes[0];\n            }\n            this._fitAndUpdate(startIndex);\n        }\n    };\n    ViewabilityTracker.prototype.getLastOffset = function () {\n        return this._currentOffset;\n    };\n    ViewabilityTracker.prototype.getLastActualOffset = function () {\n        return this._actualOffset;\n    };\n    ViewabilityTracker.prototype.getEngagedIndexes = function () {\n        return this._engagedIndexes;\n    };\n    ViewabilityTracker.prototype.findFirstLogicallyVisibleIndex = function () {\n        var relevantIndex = this._findFirstVisibleIndexUsingBS(0.001);\n        var result = relevantIndex;\n        for (var i = relevantIndex - 1; i >= 0; i--) {\n            if (this._isHorizontal) {\n                if (this._layouts[relevantIndex].x !== this._layouts[i].x) {\n                    break;\n                }\n                else {\n                    result = i;\n                }\n            }\n            else {\n                if (this._layouts[relevantIndex].y !== this._layouts[i].y) {\n                    break;\n                }\n                else {\n                    result = i;\n                }\n            }\n        }\n        return result;\n    };\n    ViewabilityTracker.prototype.updateRenderAheadOffset = function (renderAheadOffset) {\n        this._renderAheadOffset = Math.max(0, renderAheadOffset);\n        this.forceRefreshWithOffset(this._currentOffset);\n    };\n    ViewabilityTracker.prototype.getCurrentRenderAheadOffset = function () {\n        return this._renderAheadOffset;\n    };\n    ViewabilityTracker.prototype.setActualOffset = function (actualOffset) {\n        this._actualOffset = actualOffset;\n    };\n    ViewabilityTracker.prototype._findFirstVisibleIndexOptimally = function () {\n        var firstVisibleIndex = 0;\n        //TODO: Talha calculate this value smartly\n        if (this._currentOffset > 5000) {\n            firstVisibleIndex = this._findFirstVisibleIndexUsingBS();\n        }\n        else if (this._currentOffset > 0) {\n            firstVisibleIndex = this._findFirstVisibleIndexLinearly();\n        }\n        return firstVisibleIndex;\n    };\n    ViewabilityTracker.prototype._fitAndUpdate = function (startIndex) {\n        var newVisibleItems = [];\n        var newEngagedItems = [];\n        this._fitIndexes(newVisibleItems, newEngagedItems, startIndex, true);\n        this._fitIndexes(newVisibleItems, newEngagedItems, startIndex + 1, false);\n        this._diffUpdateOriginalIndexesAndRaiseEvents(newVisibleItems, newEngagedItems);\n    };\n    ViewabilityTracker.prototype._doInitialFit = function (offset, windowCorrection) {\n        offset = Math.min(this._maxOffset, Math.max(0, offset));\n        this._updateTrackingWindows(offset, windowCorrection);\n        var firstVisibleIndex = this._findFirstVisibleIndexOptimally();\n        this._fitAndUpdate(firstVisibleIndex);\n    };\n    //TODO:Talha switch to binary search and remove atleast once logic in _fitIndexes\n    ViewabilityTracker.prototype._findFirstVisibleIndexLinearly = function () {\n        var count = this._layouts.length;\n        var itemRect = null;\n        var relevantDim = { start: 0, end: 0 };\n        for (var i = 0; i < count; i++) {\n            itemRect = this._layouts[i];\n            this._setRelevantBounds(itemRect, relevantDim);\n            if (this._itemIntersectsVisibleWindow(relevantDim.start, relevantDim.end)) {\n                return i;\n            }\n        }\n        return 0;\n    };\n    ViewabilityTracker.prototype._findFirstVisibleIndexUsingBS = function (bias) {\n        if (bias === void 0) { bias = 0; }\n        var count = this._layouts.length;\n        return BinarySearch_1.default.findClosestHigherValueIndex(count, this._visibleWindow.start + bias, this._valueExtractorForBinarySearch);\n    };\n    //TODO:Talha Optimize further in later revisions, alteast once logic can be replace with a BS lookup\n    ViewabilityTracker.prototype._fitIndexes = function (newVisibleIndexes, newEngagedIndexes, startIndex, isReverse) {\n        var count = this._layouts.length;\n        var relevantDim = { start: 0, end: 0 };\n        var i = 0;\n        var atLeastOneLocated = false;\n        if (startIndex < count) {\n            if (!isReverse) {\n                for (i = startIndex; i < count; i++) {\n                    if (this._checkIntersectionAndReport(i, false, relevantDim, newVisibleIndexes, newEngagedIndexes)) {\n                        atLeastOneLocated = true;\n                    }\n                    else {\n                        if (atLeastOneLocated) {\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                for (i = startIndex; i >= 0; i--) {\n                    if (this._checkIntersectionAndReport(i, true, relevantDim, newVisibleIndexes, newEngagedIndexes)) {\n                        atLeastOneLocated = true;\n                    }\n                    else {\n                        if (atLeastOneLocated) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    ViewabilityTracker.prototype._checkIntersectionAndReport = function (index, insertOnTop, relevantDim, newVisibleIndexes, newEngagedIndexes) {\n        var itemRect = this._layouts[index];\n        var isFound = false;\n        this._setRelevantBounds(itemRect, relevantDim);\n        if (this._itemIntersectsVisibleWindow(relevantDim.start, relevantDim.end)) {\n            if (insertOnTop) {\n                newVisibleIndexes.splice(0, 0, index);\n                newEngagedIndexes.splice(0, 0, index);\n            }\n            else {\n                newVisibleIndexes.push(index);\n                newEngagedIndexes.push(index);\n            }\n            isFound = true;\n        }\n        else if (this._itemIntersectsEngagedWindow(relevantDim.start, relevantDim.end)) {\n            //TODO: This needs to be optimized\n            if (insertOnTop) {\n                newEngagedIndexes.splice(0, 0, index);\n            }\n            else {\n                newEngagedIndexes.push(index);\n            }\n            isFound = true;\n        }\n        return isFound;\n    };\n    ViewabilityTracker.prototype._setRelevantBounds = function (itemRect, relevantDim) {\n        if (this._isHorizontal) {\n            relevantDim.end = itemRect.x + itemRect.width;\n            relevantDim.start = itemRect.x;\n        }\n        else {\n            relevantDim.end = itemRect.y + itemRect.height;\n            relevantDim.start = itemRect.y;\n        }\n    };\n    ViewabilityTracker.prototype._isItemInBounds = function (window, itemBound) {\n        return (window.start < itemBound && window.end > itemBound);\n    };\n    ViewabilityTracker.prototype._isItemBoundsBeyondWindow = function (window, startBound, endBound) {\n        return (window.start >= startBound && window.end <= endBound);\n    };\n    ViewabilityTracker.prototype._isZeroHeightEdgeElement = function (window, startBound, endBound) {\n        return startBound - endBound === 0 && (window.start === startBound || window.end === endBound);\n    };\n    ViewabilityTracker.prototype._itemIntersectsWindow = function (window, startBound, endBound) {\n        return this._isItemInBounds(window, startBound) ||\n            this._isItemInBounds(window, endBound) ||\n            this._isItemBoundsBeyondWindow(window, startBound, endBound) ||\n            this._isZeroHeightEdgeElement(window, startBound, endBound);\n    };\n    ViewabilityTracker.prototype._itemIntersectsEngagedWindow = function (startBound, endBound) {\n        return this._itemIntersectsWindow(this._engagedWindow, startBound, endBound);\n    };\n    ViewabilityTracker.prototype._itemIntersectsVisibleWindow = function (startBound, endBound) {\n        return this._itemIntersectsWindow(this._visibleWindow, startBound, endBound);\n    };\n    ViewabilityTracker.prototype._updateTrackingWindows = function (offset, correction) {\n        var startCorrection = correction.windowShift + correction.startCorrection;\n        var bottomCorrection = correction.windowShift + correction.endCorrection;\n        var startOffset = offset + startCorrection;\n        var endOffset = (offset + this._windowBound) + bottomCorrection;\n        this._engagedWindow.start = Math.max(0, startOffset - this._renderAheadOffset);\n        this._engagedWindow.end = endOffset + this._renderAheadOffset;\n        this._visibleWindow.start = startOffset;\n        this._visibleWindow.end = endOffset;\n    };\n    //TODO:Talha optimize this\n    ViewabilityTracker.prototype._diffUpdateOriginalIndexesAndRaiseEvents = function (newVisibleItems, newEngagedItems) {\n        this._diffArraysAndCallFunc(newVisibleItems, this._visibleIndexes, this.onVisibleRowsChanged);\n        this._diffArraysAndCallFunc(newEngagedItems, this._engagedIndexes, this.onEngagedRowsChanged);\n        this._visibleIndexes = newVisibleItems;\n        this._engagedIndexes = newEngagedItems;\n    };\n    ViewabilityTracker.prototype._diffArraysAndCallFunc = function (newItems, oldItems, func) {\n        if (func) {\n            var now = this._calculateArrayDiff(newItems, oldItems);\n            var notNow = this._calculateArrayDiff(oldItems, newItems);\n            if (now.length > 0 || notNow.length > 0) {\n                func(newItems.slice(), now, notNow);\n            }\n        }\n    };\n    //TODO:Talha since arrays are sorted this can be much faster\n    ViewabilityTracker.prototype._calculateArrayDiff = function (arr1, arr2) {\n        var len = arr1.length;\n        var diffArr = [];\n        for (var i = 0; i < len; i++) {\n            if (BinarySearch_1.default.findIndexOf(arr2, arr1[i]) === -1) {\n                diffArr.push(arr1[i]);\n            }\n        }\n        return diffArr;\n    };\n    return ViewabilityTracker;\n}());\nexports.default = ViewabilityTracker;\n//# sourceMappingURL=ViewabilityTracker.js.map","/root/my-app/src/recyclerlistview/dist/web/core/scrollcomponent/BaseScrollComponent.js",["229","230","231"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar BaseScrollComponent = /** @class */ (function (_super) {\n    __extends(BaseScrollComponent, _super);\n    function BaseScrollComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return BaseScrollComponent;\n}(React.Component));\nexports.default = BaseScrollComponent;\n//# sourceMappingURL=BaseScrollComponent.js.map","/root/my-app/src/recyclerlistview/dist/web/platform/web/scrollcomponent/ScrollViewer.js",["232","233","234"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar BaseScrollView_1 = require(\"../../../core/scrollcomponent/BaseScrollView\");\nvar debounce = require(\"lodash.debounce\");\nvar ScrollEventNormalizer_1 = require(\"./ScrollEventNormalizer\");\n/***\n * A scrollviewer that mimics react native scrollview. Additionally on web it can start listening to window scroll events optionally.\n * Supports both window scroll and scrollable divs inside other divs.\n */\nvar ScrollViewer = /** @class */ (function (_super) {\n    __extends(ScrollViewer, _super);\n    function ScrollViewer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.scrollEndEventSimulator = debounce(function (executable) {\n            executable();\n        }, 1200);\n        _this._mainDivRef = null;\n        _this._isScrolling = false;\n        _this._scrollEventNormalizer = null;\n        _this._setDivRef = function (div) {\n            _this._mainDivRef = div;\n            if (div) {\n                _this._scrollEventNormalizer = new ScrollEventNormalizer_1.ScrollEventNormalizer(div);\n            }\n            else {\n                _this._scrollEventNormalizer = null;\n            }\n        };\n        _this._getRelevantOffset = function () {\n            if (!_this.props.useWindowScroll) {\n                if (_this._mainDivRef) {\n                    if (_this.props.horizontal) {\n                        return _this._mainDivRef.scrollLeft;\n                    }\n                    else {\n                        return _this._mainDivRef.scrollTop;\n                    }\n                }\n                return 0;\n            }\n            else {\n                if (_this.props.horizontal) {\n                    return window.scrollX;\n                }\n                else {\n                    return window.scrollY;\n                }\n            }\n        };\n        _this._setRelevantOffset = function (offset) {\n            if (!_this.props.useWindowScroll) {\n                if (_this._mainDivRef) {\n                    if (_this.props.horizontal) {\n                        _this._mainDivRef.scrollLeft = offset;\n                    }\n                    else {\n                        _this._mainDivRef.scrollTop = offset;\n                    }\n                }\n            }\n            else {\n                if (_this.props.horizontal) {\n                    window.scrollTo(offset, 0);\n                }\n                else {\n                    window.scrollTo(0, offset);\n                }\n            }\n        };\n        _this._isScrollEnd = function () {\n            if (_this._mainDivRef) {\n                _this._mainDivRef.style.pointerEvents = \"auto\";\n            }\n            _this._isScrolling = false;\n        };\n        _this._trackScrollOccurence = function () {\n            if (!_this._isScrolling) {\n                if (_this._mainDivRef) {\n                    _this._mainDivRef.style.pointerEvents = \"none\";\n                }\n                _this._isScrolling = true;\n            }\n            _this.scrollEndEventSimulator(_this._isScrollEnd);\n        };\n        _this._onWindowResize = function () {\n            if (_this.props.onSizeChanged && _this.props.useWindowScroll) {\n                _this.props.onSizeChanged({ height: window.innerHeight, width: window.innerWidth });\n            }\n        };\n        _this._windowOnScroll = function () {\n            if (_this.props.onScroll) {\n                if (_this._scrollEventNormalizer) {\n                    _this.props.onScroll(_this._scrollEventNormalizer.windowEvent);\n                }\n            }\n        };\n        _this._onScroll = function () {\n            if (_this.props.onScroll) {\n                if (_this._scrollEventNormalizer) {\n                    _this.props.onScroll(_this._scrollEventNormalizer.divEvent);\n                }\n            }\n        };\n        return _this;\n    }\n    ScrollViewer.prototype.componentDidMount = function () {\n        if (this.props.onSizeChanged) {\n            if (this.props.useWindowScroll) {\n                this._startListeningToWindowEvents();\n                this.props.onSizeChanged({ height: window.innerHeight, width: window.innerWidth });\n            }\n            else if (this._mainDivRef) {\n                this._startListeningToDivEvents();\n                this.props.onSizeChanged({ height: this._mainDivRef.clientHeight, width: this._mainDivRef.clientWidth });\n            }\n        }\n    };\n    ScrollViewer.prototype.componentWillUnmount = function () {\n        window.removeEventListener(\"scroll\", this._windowOnScroll);\n        if (this._mainDivRef) {\n            this._mainDivRef.removeEventListener(\"scroll\", this._onScroll);\n        }\n        window.removeEventListener(\"resize\", this._onWindowResize);\n    };\n    ScrollViewer.prototype.scrollTo = function (scrollInput) {\n        if (scrollInput.animated) {\n            this._doAnimatedScroll(this.props.horizontal ? scrollInput.x : scrollInput.y);\n        }\n        else {\n            this._setRelevantOffset(this.props.horizontal ? scrollInput.x : scrollInput.y);\n        }\n    };\n    ScrollViewer.prototype.render = function () {\n        return !this.props.useWindowScroll\n            ? React.createElement(\"div\", { ref: this._setDivRef, style: __assign({ WebkitOverflowScrolling: \"touch\", height: \"100%\", overflowX: this.props.horizontal ? \"scroll\" : \"hidden\", overflowY: !this.props.horizontal ? \"scroll\" : \"hidden\", width: \"100%\" }, this.props.style) },\n                React.createElement(\"div\", { style: { position: \"relative\" } }, this.props.children))\n            : React.createElement(\"div\", { ref: this._setDivRef, style: __assign({ position: \"relative\" }, this.props.style) }, this.props.children);\n    };\n    ScrollViewer.prototype._doAnimatedScroll = function (offset) {\n        var _this = this;\n        var start = this._getRelevantOffset();\n        if (offset > start) {\n            start = Math.max(offset - 800, start);\n        }\n        else {\n            start = Math.min(offset + 800, start);\n        }\n        var change = offset - start;\n        var increment = 20;\n        var duration = 200;\n        var animateScroll = function (elapsedTime) {\n            elapsedTime += increment;\n            var position = _this._easeInOut(elapsedTime, start, change, duration);\n            _this._setRelevantOffset(position);\n            if (elapsedTime < duration) {\n                window.setTimeout(function () { return animateScroll(elapsedTime); }, increment);\n            }\n        };\n        animateScroll(0);\n    };\n    ScrollViewer.prototype._startListeningToDivEvents = function () {\n        if (this._mainDivRef) {\n            this._mainDivRef.addEventListener(\"scroll\", this._onScroll);\n        }\n    };\n    ScrollViewer.prototype._startListeningToWindowEvents = function () {\n        window.addEventListener(\"scroll\", this._windowOnScroll);\n        if (this.props.canChangeSize) {\n            window.addEventListener(\"resize\", this._onWindowResize);\n        }\n    };\n    ScrollViewer.prototype._easeInOut = function (currentTime, start, change, duration) {\n        currentTime /= duration / 2;\n        if (currentTime < 1) {\n            return change / 2 * currentTime * currentTime + start;\n        }\n        currentTime -= 1;\n        return (-change) / 2 * (currentTime * (currentTime - 2) - 1) + start;\n    };\n    ScrollViewer.defaultProps = {\n        canChangeSize: false,\n        horizontal: false,\n        style: null,\n        useWindowScroll: false,\n    };\n    return ScrollViewer;\n}(BaseScrollView_1.default));\nexports.default = ScrollViewer;\n//# sourceMappingURL=ScrollViewer.js.map","/root/my-app/src/recyclerlistview/dist/web/core/viewrenderer/BaseViewRenderer.js",["235","236","237","238","239"],"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ComponentCompat_1 = require(\"../../utils/ComponentCompat\");\nvar BaseViewRenderer = /** @class */ (function (_super) {\n    __extends(BaseViewRenderer, _super);\n    function BaseViewRenderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BaseViewRenderer.prototype.shouldComponentUpdate = function (newProps) {\n        var hasMoved = this.props.x !== newProps.x || this.props.y !== newProps.y;\n        var hasSizeChanged = !newProps.forceNonDeterministicRendering &&\n            (this.props.width !== newProps.width || this.props.height !== newProps.height) ||\n            this.props.layoutProvider !== newProps.layoutProvider;\n        var hasExtendedStateChanged = this.props.extendedState !== newProps.extendedState;\n        var hasInternalSnapshotChanged = this.props.internalSnapshot !== newProps.internalSnapshot;\n        var hasDataChanged = (this.props.dataHasChanged && this.props.dataHasChanged(this.props.data, newProps.data));\n        var shouldUpdate = hasSizeChanged || hasDataChanged || hasExtendedStateChanged || hasInternalSnapshotChanged;\n        if (shouldUpdate) {\n            newProps.itemAnimator.animateWillUpdate(this.props.x, this.props.y, newProps.x, newProps.y, this.getRef(), newProps.index);\n        }\n        else if (hasMoved) {\n            shouldUpdate = !newProps.itemAnimator.animateShift(this.props.x, this.props.y, newProps.x, newProps.y, this.getRef(), newProps.index);\n        }\n        return shouldUpdate;\n    };\n    BaseViewRenderer.prototype.componentDidMount = function () {\n        this.animatorStyleOverrides = undefined;\n        this.props.itemAnimator.animateDidMount(this.props.x, this.props.y, this.getRef(), this.props.index);\n    };\n    BaseViewRenderer.prototype.componentWillMountCompat = function () {\n        this.animatorStyleOverrides = this.props.itemAnimator.animateWillMount(this.props.x, this.props.y, this.props.index);\n    };\n    BaseViewRenderer.prototype.componentWillUnmount = function () {\n        this.props.itemAnimator.animateWillUnmount(this.props.x, this.props.y, this.getRef(), this.props.index);\n    };\n    BaseViewRenderer.prototype.renderChild = function () {\n        return this.props.childRenderer(this.props.layoutType, this.props.data, this.props.index, this.props.extendedState);\n    };\n    return BaseViewRenderer;\n}(ComponentCompat_1.ComponentCompat));\nexports.default = BaseViewRenderer;\n//# sourceMappingURL=BaseViewRenderer.js.map","/root/my-app/src/recyclerlistview/dist/web/utils/BinarySearch.js",["240"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CustomError_1 = require(\"../core/exceptions/CustomError\");\nvar BinarySearch = /** @class */ (function () {\n    function BinarySearch() {\n    }\n    BinarySearch.findClosestHigherValueIndex = function (size, targetValue, valueExtractor) {\n        var low = 0;\n        var high = size - 1;\n        var mid = Math.floor((low + high) / 2);\n        var lastValue = 0;\n        var absoluteLastDiff = Math.abs(valueExtractor(mid) - targetValue);\n        var result = mid;\n        var diff = 0;\n        var absoluteDiff = 0;\n        if (absoluteLastDiff === 0) {\n            return result;\n        }\n        if (high < 0) {\n            throw new CustomError_1.default({\n                message: \"The collection cannot be empty\",\n                type: \"InvalidStateException\",\n            });\n        }\n        while (low <= high) {\n            mid = Math.floor((low + high) / 2);\n            lastValue = valueExtractor(mid);\n            diff = lastValue - targetValue;\n            absoluteDiff = Math.abs(diff);\n            if (diff >= 0 && absoluteDiff < absoluteLastDiff) {\n                absoluteLastDiff = absoluteDiff;\n                result = mid;\n            }\n            if (targetValue < lastValue) {\n                high = mid - 1;\n            }\n            else if (targetValue > lastValue) {\n                low = mid + 1;\n            }\n            else {\n                return mid;\n            }\n        }\n        return result;\n    };\n    BinarySearch.findClosestValueToTarget = function (values, target) {\n        var low = 0;\n        var high = values.length - 1;\n        var mid = Math.floor((low + high) / 2);\n        var midValue = values[mid];\n        var lastMidValue = midValue + 1;\n        while (low <= high && midValue !== lastMidValue) {\n            if (midValue === target) {\n                break;\n            }\n            else if (midValue < target) {\n                low = mid;\n            }\n            else if (midValue > target) {\n                high = mid;\n            }\n            mid = Math.floor((low + high) / 2);\n            lastMidValue = midValue;\n            midValue = values[mid];\n        }\n        return {\n            value: midValue,\n            index: mid,\n        };\n    };\n    /**\n     * Largest value from given values that is smaller or equal to the target number.\n     */\n    BinarySearch.findValueSmallerThanTarget = function (values, target) {\n        var low = 0;\n        var high = values.length - 1;\n        if (target >= values[high]) {\n            return {\n                value: values[high],\n                index: high,\n            };\n        }\n        else if (target < values[low]) {\n            return undefined;\n        }\n        var midValueAndIndex = this.findClosestValueToTarget(values, target);\n        var midValue = midValueAndIndex.value;\n        var mid = midValueAndIndex.index;\n        if (midValue <= target) {\n            return {\n                value: midValue,\n                index: mid,\n            };\n        }\n        else {\n            return {\n                value: values[mid - 1],\n                index: mid - 1,\n            };\n        }\n    };\n    /**\n     * Smallest value from given values that is larger or equal to the target number.\n     */\n    BinarySearch.findValueLargerThanTarget = function (values, target) {\n        var low = 0;\n        var high = values.length - 1;\n        if (target < values[low]) {\n            return {\n                value: values[low],\n                index: low,\n            };\n        }\n        else if (target > values[high]) {\n            return undefined;\n        }\n        var midValueAndIndex = this.findClosestValueToTarget(values, target);\n        var midValue = midValueAndIndex.value;\n        var mid = midValueAndIndex.index;\n        if (midValue >= target) {\n            return {\n                value: midValue,\n                index: mid,\n            };\n        }\n        else {\n            return {\n                value: values[mid + 1],\n                index: mid + 1,\n            };\n        }\n    };\n    BinarySearch.findIndexOf = function (array, value) {\n        var j = 0;\n        var length = array.length;\n        var i = 0;\n        while (j < length) {\n            i = length + j - 1 >> 1;\n            if (value > array[i]) {\n                j = i + 1;\n            }\n            else if (value < array[i]) {\n                length = i;\n            }\n            else {\n                return i;\n            }\n        }\n        return -1;\n    };\n    return BinarySearch;\n}());\nexports.default = BinarySearch;\n//# sourceMappingURL=BinarySearch.js.map","/root/my-app/src/recyclerlistview/dist/web/platform/web/scrollcomponent/ScrollEventNormalizer.js",["241"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ScrollEventNormalizer = /** @class */ (function () {\n    function ScrollEventNormalizer(target) {\n        this.divEvent = {\n            nativeEvent: {\n                contentOffset: {\n                    get x() {\n                        return target.scrollLeft;\n                    },\n                    get y() {\n                        return target.scrollTop;\n                    },\n                },\n                contentSize: {\n                    get height() {\n                        return target.scrollHeight;\n                    },\n                    get width() {\n                        return target.scrollWidth;\n                    },\n                },\n                layoutMeasurement: {\n                    get height() {\n                        return target.offsetHeight;\n                    },\n                    get width() {\n                        return target.offsetWidth;\n                    },\n                },\n            },\n        };\n        this.windowEvent = {\n            nativeEvent: {\n                contentOffset: {\n                    get x() {\n                        return window.scrollX === undefined ? window.pageXOffset : window.scrollX;\n                    },\n                    get y() {\n                        return window.scrollY === undefined ? window.pageYOffset : window.scrollY;\n                    },\n                },\n                contentSize: {\n                    get height() {\n                        return target.offsetHeight;\n                    },\n                    get width() {\n                        return target.offsetWidth;\n                    },\n                },\n                layoutMeasurement: {\n                    get height() {\n                        return window.innerHeight;\n                    },\n                    get width() {\n                        return window.innerWidth;\n                    },\n                },\n            },\n        };\n    }\n    return ScrollEventNormalizer;\n}());\nexports.ScrollEventNormalizer = ScrollEventNormalizer;\n//# sourceMappingURL=ScrollEventNormalizer.js.map",{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","severity":1,"message":"247","line":5,"column":8,"nodeType":"248","messageId":"249","endLine":5,"endColumn":26},{"ruleId":"246","severity":1,"message":"250","line":7,"column":2,"nodeType":"248","messageId":"249","endLine":7,"endColumn":23},{"ruleId":"251","severity":1,"message":"252","line":34,"column":2,"nodeType":"253","messageId":"254","endLine":91,"endColumn":4},{"ruleId":"246","severity":1,"message":"255","line":19,"column":8,"nodeType":"248","messageId":"249","endLine":19,"endColumn":22},{"ruleId":"246","severity":1,"message":"256","line":45,"column":7,"nodeType":"248","messageId":"249","endLine":45,"endColumn":14},{"ruleId":"246","severity":1,"message":"257","line":382,"column":11,"nodeType":"248","messageId":"249","endLine":382,"endColumn":21},{"ruleId":"246","severity":1,"message":"258","line":7,"column":7,"nodeType":"248","messageId":"249","endLine":7,"endColumn":11},{"ruleId":"246","severity":1,"message":"259","line":116,"column":33,"nodeType":"248","messageId":"249","endLine":116,"endColumn":38},{"ruleId":"246","severity":1,"message":"260","line":5,"column":17,"nodeType":"248","messageId":"249","endLine":5,"endColumn":26},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"265"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"266"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"267"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"268"},{"ruleId":"269","severity":1,"message":"270","line":86,"column":32,"nodeType":"271","messageId":"272","endLine":86,"endColumn":34},{"ruleId":"269","severity":1,"message":"270","line":86,"column":65,"nodeType":"271","messageId":"272","endLine":86,"endColumn":67},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"273"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"274"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"275"},{"ruleId":"276","severity":1,"message":"277","line":436,"column":17,"nodeType":"248","messageId":"278","endLine":436,"endColumn":30},{"ruleId":"276","severity":1,"message":"277","line":444,"column":17,"nodeType":"248","messageId":"278","endLine":444,"endColumn":30},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"279"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"280"},{"ruleId":"269","severity":1,"message":"270","line":34,"column":32,"nodeType":"271","messageId":"272","endLine":34,"endColumn":34},{"ruleId":"269","severity":1,"message":"270","line":34,"column":65,"nodeType":"271","messageId":"272","endLine":34,"endColumn":67},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"281"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"282"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"283"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"284"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"285"},{"ruleId":"276","severity":1,"message":"286","line":238,"column":17,"nodeType":"248","messageId":"278","endLine":238,"endColumn":20},{"ruleId":"276","severity":1,"message":"286","line":249,"column":18,"nodeType":"248","messageId":"278","endLine":249,"endColumn":21},{"ruleId":"276","severity":1,"message":"287","line":251,"column":21,"nodeType":"248","messageId":"278","endLine":251,"endColumn":26},{"ruleId":"276","severity":1,"message":"286","line":272,"column":18,"nodeType":"248","messageId":"278","endLine":272,"endColumn":21},{"ruleId":"276","severity":1,"message":"287","line":274,"column":21,"nodeType":"248","messageId":"278","endLine":274,"endColumn":26},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"288"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"289"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"290"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"291"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"292"},{"ruleId":"269","severity":1,"message":"270","line":38,"column":37,"nodeType":"271","messageId":"272","endLine":38,"endColumn":39},{"ruleId":"269","severity":1,"message":"270","line":38,"column":70,"nodeType":"271","messageId":"272","endLine":38,"endColumn":72},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"293"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"294"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"295"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"296"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"297"},{"ruleId":"269","severity":1,"message":"270","line":20,"column":32,"nodeType":"271","messageId":"272","endLine":20,"endColumn":34},{"ruleId":"269","severity":1,"message":"270","line":20,"column":65,"nodeType":"271","messageId":"272","endLine":20,"endColumn":67},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"298"},{"ruleId":"269","severity":1,"message":"270","line":38,"column":37,"nodeType":"271","messageId":"272","endLine":38,"endColumn":39},{"ruleId":"269","severity":1,"message":"270","line":38,"column":70,"nodeType":"271","messageId":"272","endLine":38,"endColumn":72},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"299"},{"ruleId":"269","severity":1,"message":"270","line":20,"column":32,"nodeType":"271","messageId":"272","endLine":20,"endColumn":34},{"ruleId":"269","severity":1,"message":"270","line":20,"column":65,"nodeType":"271","messageId":"272","endLine":20,"endColumn":67},{"ruleId":"269","severity":1,"message":"270","line":24,"column":71,"nodeType":"271","messageId":"272","endLine":24,"endColumn":73},{"ruleId":"269","severity":1,"message":"270","line":25,"column":92,"nodeType":"271","messageId":"272","endLine":25,"endColumn":94},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"300"},{"ruleId":"261","severity":1,"message":"262","line":1,"column":1,"nodeType":"263","messageId":"264","endLine":1,"endColumn":14,"fix":"301"},"no-native-reassign",["302"],"no-negated-in-lhs",["303"],"@typescript-eslint/no-unused-vars","'ReactWindowExample' is defined but never used.","Identifier","unusedVar","'RecycleTestComponent2' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'BaseScrollView' is defined but never used.","'samples' is assigned a value but never used.","'_ScrollTop' is defined but never used.","'list' is assigned a value but never used.","'draw2' is defined but never used.","'Component' is defined but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"304","text":"305"},{"range":"306","text":"305"},{"range":"307","text":"305"},{"range":"308","text":"305"},"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",{"range":"309","text":"305"},{"range":"310","text":"305"},{"range":"311","text":"305"},"no-redeclare","'layoutManager' is already defined.","redeclared",{"range":"312","text":"305"},{"range":"313","text":"305"},{"range":"314","text":"305"},{"range":"315","text":"305"},{"range":"316","text":"305"},{"range":"317","text":"305"},{"range":"318","text":"305"},"'key' is already defined.","'index' is already defined.",{"range":"319","text":"305"},{"range":"320","text":"305"},{"range":"321","text":"305"},{"range":"322","text":"305"},{"range":"323","text":"305"},{"range":"324","text":"305"},{"range":"325","text":"305"},{"range":"326","text":"305"},{"range":"327","text":"305"},{"range":"328","text":"305"},{"range":"329","text":"305"},{"range":"330","text":"305"},{"range":"331","text":"305"},{"range":"332","text":"305"},"no-global-assign","no-unsafe-negation",[0,13],"",[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13],[0,13]]